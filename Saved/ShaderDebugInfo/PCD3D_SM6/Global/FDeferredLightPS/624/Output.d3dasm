;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyz         1     NONE   float   xyz 
; SV_Position              0   xyzw        2      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 0b28c6a9c2d15e9d260f07bdd0784f1f
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 CloudShadowmapTranslatedWorldToLightClipMatrix;; Offset:   80
;       float CloudShadowmapFarDepthKm;               ; Offset:  144
;       float CloudShadowmapStrength;                 ; Offset:  168
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   172
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB2            cb2     1
; View_PreIntegratedBRDFSampler     sampler      NA          NA      S0             s0     1
; View_TransmittanceLutTextureSampler   sampler      NA          NA      S1             s1     1
; View_SSProfilesTransmissionSampler   sampler      NA          NA      S2             s2     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S3             s3     1
; LightAttenuationTextureSampler    sampler      NA          NA      S4             s4     1
; CloudShadowmapSampler             sampler      NA          NA      S5             s5     1
; View_PreIntegratedBRDF            texture     f32          2d      T0             t0     1
; View_TransmittanceLutTexture      texture     f32          2d      T1             t1     1
; View_SSProfilesTexture            texture     f32          2d      T2             t2     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T4             t4     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T5             t5     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T6             t6     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T7             t7     1
; SceneTexturesStruct_GBufferETexture   texture     f32          2d      T8             t8     1
; SceneTexturesStruct_ScreenSpaceAOTexture   texture     f32          2d      T9             t9     1
; LightAttenuationTexture           texture     f32          2d     T10            t10     1
; CloudShadowmapTexture             texture     f32          2d     T11            t11     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9 }
;   output 3 depends on inputs: { 0, 1, 4, 5, 6, 8, 9 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%struct.SamplerState = type { i32 }

define void @DeferredLightPixelMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 172 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %34 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %35 = extractvalue %dx.types.ResRet.f32 %34, 0
  %36 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.f32 %36, 0
  %38 = fmul fast float %37, %35
  %39 = extractvalue %dx.types.CBufRet.f32 %36, 1
  %40 = fadd fast float %38, %39
  %41 = extractvalue %dx.types.CBufRet.f32 %36, 2
  %42 = fmul fast float %41, %35
  %43 = extractvalue %dx.types.CBufRet.f32 %36, 3
  %44 = fsub fast float %42, %43
  %45 = fdiv fast float 1.000000e+00, %44
  %46 = fadd fast float %40, %45
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %48 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %47, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %49 = extractvalue %dx.types.ResRet.f32 %48, 0
  %50 = extractvalue %dx.types.ResRet.f32 %48, 1
  %51 = extractvalue %dx.types.ResRet.f32 %48, 2
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %53 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 0
  %55 = extractvalue %dx.types.ResRet.f32 %53, 1
  %56 = extractvalue %dx.types.ResRet.f32 %53, 2
  %57 = extractvalue %dx.types.ResRet.f32 %53, 3
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %59 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %58, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %60 = extractvalue %dx.types.ResRet.f32 %59, 0
  %61 = extractvalue %dx.types.ResRet.f32 %59, 1
  %62 = extractvalue %dx.types.ResRet.f32 %59, 2
  %63 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %64 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %63, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %65 = extractvalue %dx.types.ResRet.f32 %64, 0
  %66 = extractvalue %dx.types.ResRet.f32 %64, 1
  %67 = extractvalue %dx.types.ResRet.f32 %64, 2
  %68 = extractvalue %dx.types.ResRet.f32 %64, 3
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 0
  %72 = extractvalue %dx.types.ResRet.f32 %70, 1
  %73 = extractvalue %dx.types.ResRet.f32 %70, 2
  %74 = extractvalue %dx.types.ResRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = fmul fast float %76, %30
  %79 = fmul fast float %77, %31
  %80 = fptoui float %78 to i32
  %81 = fptoui float %79 to i32
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 153)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = fptoui float %83 to i32
  %85 = add i32 %80, %81
  %86 = add i32 %85, %84
  %87 = and i32 %86, 1
  %88 = icmp ne i32 %87, 0
  %89 = fmul fast float %57, 2.550000e+02
  %90 = fadd fast float %89, 5.000000e-01
  %91 = fptoui float %90 to i32
  %92 = and i32 %91, 15
  %93 = lshr i32 %91, 4
  %94 = fmul fast float %49, 2.000000e+00
  %95 = fmul fast float %50, 2.000000e+00
  %96 = fmul fast float %51, 2.000000e+00
  %97 = fadd fast float %94, -1.000000e+00
  %98 = fadd fast float %95, -1.000000e+00
  %99 = fadd fast float %96, -1.000000e+00
  %100 = and i32 %91, 14
  %101 = icmp eq i32 %100, 2
  %102 = and i32 %91, 12
  %103 = icmp eq i32 %102, 4
  %104 = or i1 %103, %101
  %105 = icmp eq i32 %100, 8
  %106 = or i1 %105, %104
  %107 = select i1 %106, float %65, float 0.000000e+00
  %108 = select i1 %106, float %66, float 0.000000e+00
  %109 = select i1 %106, float %67, float 0.000000e+00
  %110 = select i1 %106, float %68, float 0.000000e+00
  %111 = and i32 %93, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %117, label %113

; <label>:113                                     ; preds = %0
  %114 = and i32 %93, 4
  %115 = icmp ne i32 %114, 0
  %116 = select i1 %115, float 0.000000e+00, float 1.000000e+00
  br label %117

; <label>:117                                     ; preds = %113, %0
  %118 = phi float [ %116, %113 ], [ %71, %0 ]
  %119 = phi float [ %116, %113 ], [ %72, %0 ]
  %120 = phi float [ %116, %113 ], [ %73, %0 ]
  %121 = phi float [ %116, %113 ], [ %74, %0 ]
  %122 = call float @dx.op.dot3.f32(i32 55, float %97, float %98, float %99, float %97, float %98, float %99)  ; Dot3(ax,ay,az,bx,by,bz)
  %123 = call float @dx.op.unary.f32(i32 25, float %122)  ; Rsqrt(value)
  %124 = fmul fast float %123, %97
  %125 = fmul fast float %123, %98
  %126 = fmul fast float %123, %99
  %127 = icmp eq i32 %92, 9
  %128 = select i1 %127, float 0.000000e+00, float %54
  %129 = fmul fast float %55, 0x3FB47AE140000000
  %130 = fsub fast float %60, %129
  %131 = fsub fast float %61, %129
  %132 = fsub fast float %62, %129
  %133 = fmul fast float %128, %130
  %134 = fmul fast float %128, %131
  %135 = fmul fast float %128, %132
  %136 = fadd fast float %133, %129
  %137 = fadd fast float %134, %129
  %138 = fadd fast float %135, %129
  %139 = icmp eq i32 %92, 5
  %140 = or i1 %139, %127
  br i1 %140, label %141, label %163

; <label>:141                                     ; preds = %117
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 3
  %144 = fcmp fast ogt float %143, 0.000000e+00
  br i1 %144, label %145, label %149

; <label>:145                                     ; preds = %141
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %148 = fcmp fast ogt float %147, 0.000000e+00
  br label %149

; <label>:149                                     ; preds = %145, %141
  %150 = phi i1 [ false, %141 ], [ %148, %145 ]
  %151 = fcmp fast une float %143, 0.000000e+00
  %152 = select i1 %151, float 1.000000e+00, float %60
  %153 = select i1 %151, float 1.000000e+00, float %61
  %154 = select i1 %151, float 1.000000e+00, float %62
  br i1 %150, label %155, label %163

; <label>:155                                     ; preds = %149
  %156 = uitofp i1 %88 to float
  %157 = xor i1 %88, true
  %158 = uitofp i1 %157 to float
  %159 = fmul fast float %158, %136
  %160 = fmul fast float %158, %137
  %161 = fmul fast float %158, %138
  %162 = fmul fast float %158, %55
  br label %163

; <label>:163                                     ; preds = %155, %149, %117
  %164 = phi float [ %136, %117 ], [ %159, %155 ], [ %136, %149 ]
  %165 = phi float [ %137, %117 ], [ %160, %155 ], [ %137, %149 ]
  %166 = phi float [ %138, %117 ], [ %161, %155 ], [ %138, %149 ]
  %167 = phi float [ %60, %117 ], [ %156, %155 ], [ %152, %149 ]
  %168 = phi float [ %61, %117 ], [ %156, %155 ], [ %153, %149 ]
  %169 = phi float [ %62, %117 ], [ %156, %155 ], [ %154, %149 ]
  %170 = phi float [ %55, %117 ], [ %162, %155 ], [ %55, %149 ]
  %171 = fmul fast float %167, %128
  %172 = fmul fast float %168, %128
  %173 = fmul fast float %169, %128
  %174 = fsub fast float %167, %171
  %175 = fsub fast float %168, %172
  %176 = fsub fast float %169, %173
  %177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %178 = extractvalue %dx.types.CBufRet.f32 %177, 3
  %179 = fmul fast float %178, %174
  %180 = fmul fast float %178, %175
  %181 = fmul fast float %178, %176
  %182 = extractvalue %dx.types.CBufRet.f32 %177, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %177, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %177, 2
  %185 = fadd fast float %179, %182
  %186 = fadd fast float %180, %183
  %187 = fadd fast float %181, %184
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %190 = fmul fast float %189, %164
  %191 = fmul fast float %189, %165
  %192 = fmul fast float %189, %166
  %193 = extractvalue %dx.types.CBufRet.f32 %188, 0
  %194 = extractvalue %dx.types.CBufRet.f32 %188, 1
  %195 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %196 = fadd fast float %190, %193
  %197 = fadd fast float %191, %194
  %198 = fadd fast float %192, %195
  %199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %200 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %199, %dx.types.Handle %33, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 0
  %202 = icmp eq i32 %92, 0
  br i1 %202, label %3092, label %203, !dx.controlflow.hints !45

; <label>:203                                     ; preds = %163
  %204 = fmul fast float %46, %27
  %205 = fmul fast float %46, %28
  %206 = fmul fast float %46, %29
  %207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.f32 %207, 0
  %209 = extractvalue %dx.types.CBufRet.f32 %207, 1
  %210 = extractvalue %dx.types.CBufRet.f32 %207, 2
  %211 = fadd fast float %204, %208
  %212 = fadd fast float %205, %209
  %213 = fadd fast float %206, %210
  %214 = call float @dx.op.dot3.f32(i32 55, float %27, float %28, float %29, float %27, float %28, float %29)  ; Dot3(ax,ay,az,bx,by,bz)
  %215 = call float @dx.op.unary.f32(i32 25, float %214)  ; Rsqrt(value)
  %216 = fmul fast float %215, %27
  %217 = fmul fast float %215, %28
  %218 = fmul fast float %215, %29
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 2
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 3
  %229 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %230 = extractvalue %dx.types.CBufRet.f32 %229, 2
  %231 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 2
  %234 = call float @dx.op.unary.f32(i32 6, float %233)  ; FAbs(value)
  %235 = fcmp fast olt float %233, 0.000000e+00
  %236 = extractvalue %dx.types.CBufRet.f32 %232, 3
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %240 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %242 = extractvalue %dx.types.CBufRet.f32 %241, 0
  %243 = extractvalue %dx.types.CBufRet.f32 %241, 1
  %244 = extractvalue %dx.types.CBufRet.f32 %241, 2
  %245 = extractvalue %dx.types.CBufRet.f32 %241, 3
  %246 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.i32 %246, 2
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 0
  %250 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %251 = extractvalue %dx.types.CBufRet.f32 %248, 2
  %252 = extractvalue %dx.types.CBufRet.f32 %248, 3
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = extractvalue %dx.types.CBufRet.f32 %253, 3
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 2
  %262 = extractvalue %dx.types.CBufRet.f32 %258, 3
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 2
  %267 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %268 = fmul fast float %249, %25
  %269 = call float @dx.op.tertiary.f32(i32 46, float %26, float %254, float %268)  ; FMad(a,b,c)
  %270 = call float @dx.op.tertiary.f32(i32 46, float %35, float %259, float %269)  ; FMad(a,b,c)
  %271 = fadd fast float %270, %264
  %272 = fmul fast float %250, %25
  %273 = call float @dx.op.tertiary.f32(i32 46, float %26, float %255, float %272)  ; FMad(a,b,c)
  %274 = call float @dx.op.tertiary.f32(i32 46, float %35, float %260, float %273)  ; FMad(a,b,c)
  %275 = fadd fast float %274, %265
  %276 = fmul fast float %251, %25
  %277 = call float @dx.op.tertiary.f32(i32 46, float %26, float %256, float %276)  ; FMad(a,b,c)
  %278 = call float @dx.op.tertiary.f32(i32 46, float %35, float %261, float %277)  ; FMad(a,b,c)
  %279 = fadd fast float %278, %266
  %280 = fmul fast float %252, %25
  %281 = call float @dx.op.tertiary.f32(i32 46, float %26, float %257, float %280)  ; FMad(a,b,c)
  %282 = call float @dx.op.tertiary.f32(i32 46, float %35, float %262, float %281)  ; FMad(a,b,c)
  %283 = fadd fast float %282, %267
  %284 = fdiv fast float %271, %283
  %285 = fdiv fast float %275, %283
  %286 = fdiv fast float %279, %283
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 173)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 0
  %289 = extractvalue %dx.types.CBufRet.f32 %287, 1
  %290 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %291 = fsub fast float %284, %288
  %292 = fsub fast float %285, %289
  %293 = fsub fast float %286, %290
  %294 = fmul fast float %291, 0x3EE4F8B580000000
  %295 = fmul fast float %292, 0x3EE4F8B580000000
  %296 = fmul fast float %293, 0x3EE4F8B580000000
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 3
  %299 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %300 = call float @dx.op.dot3.f32(i32 55, float %294, float %295, float %296, float %294, float %295, float %296)  ; Dot3(ax,ay,az,bx,by,bz)
  %301 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %224, float %225, float %226)  ; Dot3(ax,ay,az,bx,by,bz)
  %302 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %294, float %295, float %296)  ; Dot3(ax,ay,az,bx,by,bz)
  %303 = fmul fast float %302, 2.000000e+00
  %304 = fmul fast float %299, %299
  %305 = fsub fast float %300, %304
  %306 = fmul fast float %303, %303
  %307 = fmul fast float %301, 4.000000e+00
  %308 = fmul fast float %307, %305
  %309 = fsub fast float %306, %308
  %310 = fcmp fast ult float %309, 0.000000e+00
  br i1 %310, label %319, label %311, !dx.controlflow.hints !46

; <label>:311                                     ; preds = %203
  %312 = call float @dx.op.unary.f32(i32 24, float %309)  ; Sqrt(value)
  %313 = fsub fast float -0.000000e+00, %303
  %314 = fsub fast float %313, %312
  %315 = fsub fast float %312, %303
  %316 = fmul fast float %301, 2.000000e+00
  %317 = fdiv fast float %314, %316
  %318 = fdiv fast float %315, %316
  br label %319

; <label>:319                                     ; preds = %311, %203
  %320 = phi float [ %317, %311 ], [ -1.000000e+00, %203 ]
  %321 = phi float [ %318, %311 ], [ -1.000000e+00, %203 ]
  %322 = fcmp fast ogt float %320, 0.000000e+00
  %323 = fcmp fast ogt float %321, 0.000000e+00
  %324 = or i1 %322, %323
  br i1 %324, label %364, label %325

; <label>:325                                     ; preds = %319
  %326 = fmul fast float %294, %294
  %327 = fmul fast float %295, %295
  %328 = fadd fast float %326, %327
  %329 = fmul fast float %296, %296
  %330 = fadd fast float %328, %329
  %331 = call float @dx.op.unary.f32(i32 24, float %330)  ; Sqrt(value)
  %332 = fdiv fast float %294, %331
  %333 = fdiv fast float %295, %331
  %334 = fdiv fast float %296, %331
  %335 = call float @dx.op.dot3.f32(i32 55, float %224, float %225, float %226, float %332, float %333, float %334)  ; Dot3(ax,ay,az,bx,by,bz)
  %336 = fmul fast float %298, %298
  %337 = fsub fast float %336, %304
  %338 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %337)  ; FMax(a,b)
  %339 = call float @dx.op.unary.f32(i32 24, float %338)  ; Sqrt(value)
  %340 = fmul fast float %331, %331
  %341 = fsub fast float %340, %304
  %342 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %341)  ; FMax(a,b)
  %343 = call float @dx.op.unary.f32(i32 24, float %342)  ; Sqrt(value)
  %344 = fmul fast float %335, %335
  %345 = fadd fast float %344, -1.000000e+00
  %346 = fmul fast float %340, %345
  %347 = fadd fast float %346, %336
  %348 = fmul fast float %335, %331
  %349 = call float @dx.op.unary.f32(i32 24, float %347)  ; Sqrt(value)
  %350 = fsub fast float %349, %348
  %351 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %350)  ; FMax(a,b)
  %352 = fsub fast float %298, %331
  %353 = fsub fast float %351, %352
  %354 = fsub fast float %339, %352
  %355 = fadd fast float %354, %343
  %356 = fdiv fast float %353, %355
  %357 = fdiv fast float %343, %339
  %358 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %359 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %360 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %358, %dx.types.Handle %359, float %356, float %357, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %361 = extractvalue %dx.types.ResRet.f32 %360, 0
  %362 = extractvalue %dx.types.ResRet.f32 %360, 1
  %363 = extractvalue %dx.types.ResRet.f32 %360, 2
  br label %364

; <label>:364                                     ; preds = %325, %319
  %365 = phi float [ %361, %325 ], [ 0.000000e+00, %319 ]
  %366 = phi float [ %362, %325 ], [ 0.000000e+00, %319 ]
  %367 = phi float [ %363, %325 ], [ 0.000000e+00, %319 ]
  %368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %369 = extractvalue %dx.types.CBufRet.f32 %368, 2
  %370 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %371 = extractvalue %dx.types.CBufRet.f32 %370, 0
  %372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %373 = extractvalue %dx.types.CBufRet.f32 %372, 0
  %374 = extractvalue %dx.types.CBufRet.f32 %372, 1
  %375 = extractvalue %dx.types.CBufRet.f32 %372, 2
  %376 = extractvalue %dx.types.CBufRet.f32 %372, 3
  %377 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %378 = extractvalue %dx.types.CBufRet.f32 %377, 0
  %379 = extractvalue %dx.types.CBufRet.f32 %377, 1
  %380 = extractvalue %dx.types.CBufRet.f32 %377, 2
  %381 = extractvalue %dx.types.CBufRet.f32 %377, 3
  %382 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %383 = extractvalue %dx.types.CBufRet.f32 %382, 0
  %384 = extractvalue %dx.types.CBufRet.f32 %382, 1
  %385 = extractvalue %dx.types.CBufRet.f32 %382, 2
  %386 = extractvalue %dx.types.CBufRet.f32 %382, 3
  %387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %388 = extractvalue %dx.types.CBufRet.f32 %387, 0
  %389 = extractvalue %dx.types.CBufRet.f32 %387, 1
  %390 = extractvalue %dx.types.CBufRet.f32 %387, 2
  %391 = extractvalue %dx.types.CBufRet.f32 %387, 3
  %392 = fmul fast float %373, %284
  %393 = call float @dx.op.tertiary.f32(i32 46, float %285, float %378, float %392)  ; FMad(a,b,c)
  %394 = call float @dx.op.tertiary.f32(i32 46, float %286, float %383, float %393)  ; FMad(a,b,c)
  %395 = fadd fast float %394, %388
  %396 = fmul fast float %374, %284
  %397 = call float @dx.op.tertiary.f32(i32 46, float %285, float %379, float %396)  ; FMad(a,b,c)
  %398 = call float @dx.op.tertiary.f32(i32 46, float %286, float %384, float %397)  ; FMad(a,b,c)
  %399 = fadd fast float %398, %389
  %400 = fmul fast float %375, %284
  %401 = call float @dx.op.tertiary.f32(i32 46, float %285, float %380, float %400)  ; FMad(a,b,c)
  %402 = call float @dx.op.tertiary.f32(i32 46, float %286, float %385, float %401)  ; FMad(a,b,c)
  %403 = fadd fast float %402, %390
  %404 = fmul fast float %376, %284
  %405 = call float @dx.op.tertiary.f32(i32 46, float %285, float %381, float %404)  ; FMad(a,b,c)
  %406 = call float @dx.op.tertiary.f32(i32 46, float %286, float %386, float %405)  ; FMad(a,b,c)
  %407 = fadd fast float %406, %391
  %408 = fdiv fast float %395, %407
  %409 = fdiv fast float %399, %407
  %410 = fdiv fast float %403, %407
  %411 = fmul fast float %408, 5.000000e-01
  %412 = fmul fast float %409, 5.000000e-01
  %413 = fadd fast float %411, 5.000000e-01
  %414 = fsub fast float 5.000000e-01, %412
  %415 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %416 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %417 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %415, %dx.types.Handle %416, float %413, float %414, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %418 = extractvalue %dx.types.ResRet.f32 %417, 0
  %419 = extractvalue %dx.types.ResRet.f32 %417, 1
  %420 = extractvalue %dx.types.ResRet.f32 %417, 2
  %421 = fsub fast float 1.000000e+00, %410
  %422 = call float @dx.op.unary.f32(i32 7, float %421)  ; Saturate(value)
  %423 = fmul fast float %422, %371
  %424 = fsub fast float %423, %418
  %425 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %424)  ; FMax(a,b)
  %426 = fmul fast float %419, 1.000000e+03
  %427 = fmul fast float %426, %425
  %428 = call float @dx.op.binary.f32(i32 36, float %420, float %427)  ; FMin(a,b)
  %429 = fmul fast float %428, 0xBFF7154760000000
  %430 = call float @dx.op.unary.f32(i32 21, float %429)  ; Exp(value)
  %431 = call float @dx.op.unary.f32(i32 7, float %430)  ; Saturate(value)
  %432 = fadd fast float %431, -1.000000e+00
  %433 = fmul fast float %432, %369
  %434 = fadd fast float %433, 1.000000e+00
  %435 = fmul fast float %365, %220
  %436 = fmul fast float %435, %434
  %437 = fmul fast float %366, %221
  %438 = fmul fast float %437, %434
  %439 = fmul fast float %367, %222
  %440 = fmul fast float %439, %434
  %441 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %442 = extractvalue %dx.types.CBufRet.i32 %441, 0
  %443 = uitofp i32 %442 to float
  %444 = fmul fast float %443, 0x4040551EC0000000
  %445 = fmul fast float %443, 0x4027A147A0000000
  %446 = fadd fast float %444, %25
  %447 = fadd fast float %445, %26
  %448 = call float @dx.op.dot2.f32(i32 54, float %446, float %447, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %449 = call float @dx.op.unary.f32(i32 22, float %448)  ; Frc(value)
  %450 = fmul fast float %449, 0x404A7DD040000000
  %451 = call float @dx.op.unary.f32(i32 22, float %450)  ; Frc(value)
  %452 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %453 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %454 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %452, %dx.types.Handle %453, float %30, float %31, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %455 = extractvalue %dx.types.ResRet.f32 %454, 0
  %456 = extractvalue %dx.types.ResRet.f32 %454, 1
  %457 = extractvalue %dx.types.ResRet.f32 %454, 2
  %458 = extractvalue %dx.types.ResRet.f32 %454, 3
  %459 = fmul fast float %455, %455
  %460 = fmul fast float %456, %456
  %461 = fmul fast float %457, %457
  %462 = fmul fast float %458, %458
  %463 = fsub fast float -0.000000e+00, %216
  %464 = fsub fast float -0.000000e+00, %217
  %465 = fsub fast float -0.000000e+00, %218
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %468 = fmul fast float %467, %46
  %469 = icmp eq i32 %247, 0
  br i1 %469, label %496, label %470, !dx.controlflow.hints !47

; <label>:470                                     ; preds = %364
  %471 = call float @dx.op.dot4.f32(i32 56, float %242, float %243, float %244, float %245, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %472 = call float @dx.op.dot4.f32(i32 56, float %118, float %119, float %120, float %121, float %242, float %243, float %244, float %245)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %473 = fadd fast float %472, -1.000000e+00
  %474 = fmul fast float %473, %471
  %475 = fadd fast float %474, 1.000000e+00
  %476 = fmul fast float %239, %46
  %477 = fadd fast float %476, %240
  %478 = call float @dx.op.unary.f32(i32 7, float %477)  ; Saturate(value)
  %479 = fmul fast float %478, %478
  %480 = fsub fast float %475, %459
  %481 = fmul fast float %480, %479
  %482 = fadd fast float %481, %459
  %483 = fsub fast float %475, %460
  %484 = fmul fast float %483, %479
  %485 = fadd fast float %484, %460
  %486 = call float @dx.op.binary.f32(i32 36, float %485, float %462)  ; FMin(a,b)
  %487 = fmul fast float %482, %461
  %488 = fmul fast float %486, %461
  %489 = call float @dx.op.binary.f32(i32 36, float %460, float %462)  ; FMin(a,b)
  %490 = icmp ugt i32 %247, 1
  %491 = fcmp fast ogt float %234, 0.000000e+00
  %492 = and i1 %491, %490
  br i1 %492, label %493, label %496

; <label>:493                                     ; preds = %470
  %494 = select i1 %235, float 1.000000e+00, float %468
  %495 = fmul fast float %494, %234
  br label %496

; <label>:496                                     ; preds = %493, %470, %364
  %497 = phi float [ %489, %493 ], [ %489, %470 ], [ 1.000000e+00, %364 ]
  %498 = phi float [ %488, %493 ], [ %488, %470 ], [ 1.000000e+00, %364 ]
  %499 = phi float [ %487, %493 ], [ %487, %470 ], [ %201, %364 ]
  %500 = phi float [ %495, %493 ], [ 0.000000e+00, %470 ], [ 0.000000e+00, %364 ]
  %501 = icmp ult i32 %247, 2
  %502 = icmp eq i32 %92, 7
  %503 = and i1 %502, %501
  %504 = fmul fast float %468, 0x3FC99999A0000000
  %505 = select i1 %503, float %504, float %500
  %506 = select i1 %127, float 5.000000e-01, float %505
  %507 = fcmp fast ogt float %506, 0.000000e+00
  br i1 %507, label %508, label %805, !dx.controlflow.hints !48

; <label>:508                                     ; preds = %496
  %509 = fadd fast float %451, -5.000000e-01
  %510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %511 = extractvalue %dx.types.CBufRet.f32 %510, 0
  %512 = extractvalue %dx.types.CBufRet.f32 %510, 1
  %513 = extractvalue %dx.types.CBufRet.f32 %510, 2
  %514 = extractvalue %dx.types.CBufRet.f32 %510, 3
  %515 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %516 = extractvalue %dx.types.CBufRet.f32 %515, 0
  %517 = extractvalue %dx.types.CBufRet.f32 %515, 1
  %518 = extractvalue %dx.types.CBufRet.f32 %515, 2
  %519 = extractvalue %dx.types.CBufRet.f32 %515, 3
  %520 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %521 = extractvalue %dx.types.CBufRet.f32 %520, 0
  %522 = extractvalue %dx.types.CBufRet.f32 %520, 1
  %523 = extractvalue %dx.types.CBufRet.f32 %520, 2
  %524 = extractvalue %dx.types.CBufRet.f32 %520, 3
  %525 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %526 = extractvalue %dx.types.CBufRet.f32 %525, 0
  %527 = extractvalue %dx.types.CBufRet.f32 %525, 1
  %528 = extractvalue %dx.types.CBufRet.f32 %525, 2
  %529 = extractvalue %dx.types.CBufRet.f32 %525, 3
  %530 = fmul fast float %511, %211
  %531 = call float @dx.op.tertiary.f32(i32 46, float %212, float %516, float %530)  ; FMad(a,b,c)
  %532 = call float @dx.op.tertiary.f32(i32 46, float %213, float %521, float %531)  ; FMad(a,b,c)
  %533 = fadd fast float %532, %526
  %534 = fmul fast float %512, %211
  %535 = call float @dx.op.tertiary.f32(i32 46, float %212, float %517, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %213, float %522, float %535)  ; FMad(a,b,c)
  %537 = fadd fast float %536, %527
  %538 = fmul fast float %513, %211
  %539 = call float @dx.op.tertiary.f32(i32 46, float %212, float %518, float %538)  ; FMad(a,b,c)
  %540 = call float @dx.op.tertiary.f32(i32 46, float %213, float %523, float %539)  ; FMad(a,b,c)
  %541 = fadd fast float %540, %528
  %542 = fmul fast float %514, %211
  %543 = call float @dx.op.tertiary.f32(i32 46, float %212, float %519, float %542)  ; FMad(a,b,c)
  %544 = call float @dx.op.tertiary.f32(i32 46, float %213, float %524, float %543)  ; FMad(a,b,c)
  %545 = fadd fast float %544, %529
  %546 = fmul fast float %506, %224
  %547 = fmul fast float %506, %225
  %548 = fmul fast float %506, %226
  %549 = fmul fast float %511, %546
  %550 = call float @dx.op.tertiary.f32(i32 46, float %547, float %516, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %548, float %521, float %550)  ; FMad(a,b,c)
  %552 = fmul fast float %512, %546
  %553 = call float @dx.op.tertiary.f32(i32 46, float %547, float %517, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %548, float %522, float %553)  ; FMad(a,b,c)
  %555 = fmul fast float %513, %546
  %556 = call float @dx.op.tertiary.f32(i32 46, float %547, float %518, float %555)  ; FMad(a,b,c)
  %557 = call float @dx.op.tertiary.f32(i32 46, float %548, float %523, float %556)  ; FMad(a,b,c)
  %558 = fmul fast float %514, %546
  %559 = call float @dx.op.tertiary.f32(i32 46, float %547, float %519, float %558)  ; FMad(a,b,c)
  %560 = call float @dx.op.tertiary.f32(i32 46, float %548, float %524, float %559)  ; FMad(a,b,c)
  %561 = fadd fast float %551, %533
  %562 = fadd fast float %554, %537
  %563 = fadd fast float %557, %541
  %564 = fadd fast float %560, %545
  %565 = fdiv fast float %533, %545
  %566 = fdiv fast float %537, %545
  %567 = fdiv fast float %541, %545
  %568 = fdiv fast float %561, %564
  %569 = fdiv fast float %562, %564
  %570 = fdiv fast float %563, %564
  %571 = fsub fast float %568, %565
  %572 = fsub fast float %569, %566
  %573 = fsub fast float %570, %567
  %574 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %575 = extractvalue %dx.types.CBufRet.f32 %574, 0
  %576 = extractvalue %dx.types.CBufRet.f32 %574, 1
  %577 = fmul fast float %575, %565
  %578 = fmul fast float %576, %566
  %579 = extractvalue %dx.types.CBufRet.f32 %574, 2
  %580 = extractvalue %dx.types.CBufRet.f32 %574, 3
  %581 = fadd fast float %577, %580
  %582 = fadd fast float %578, %579
  %583 = fmul fast float %575, %571
  %584 = fmul fast float %576, %572
  %585 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %586 = extractvalue %dx.types.CBufRet.f32 %585, 2
  %587 = extractvalue %dx.types.CBufRet.f32 %585, 3
  %588 = call float @dx.op.tertiary.f32(i32 46, float %506, float %586, float 0.000000e+00)  ; FMad(a,b,c)
  %589 = call float @dx.op.tertiary.f32(i32 46, float %506, float %587, float 0.000000e+00)  ; FMad(a,b,c)
  %590 = fadd fast float %588, %541
  %591 = fadd fast float %589, %545
  %592 = fdiv fast float %590, %591
  %593 = fsub fast float %592, %567
  %594 = call float @dx.op.unary.f32(i32 6, float %593)  ; FAbs(value)
  %595 = fmul fast float %594, 2.500000e-01
  %596 = fmul fast float %509, 1.250000e-01
  %597 = fadd fast float %596, 1.250000e-01
  %598 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %581, float %582, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %599 = extractvalue %dx.types.ResRet.f32 %598, 0
  %600 = fmul fast float %583, %597
  %601 = fmul fast float %584, %597
  %602 = fmul fast float %573, %597
  %603 = fadd fast float %600, %581
  %604 = fadd fast float %601, %582
  %605 = fadd fast float %602, %567
  %606 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %603, float %604, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %607 = extractvalue %dx.types.ResRet.f32 %606, 0
  %608 = fadd fast float %605, %595
  %609 = fsub fast float %608, %607
  %610 = call float @dx.op.unary.f32(i32 6, float %609)  ; FAbs(value)
  %611 = fcmp fast olt float %610, %595
  %612 = fcmp fast une float %607, %599
  %613 = and i1 %611, %612
  %614 = select i1 %613, float %597, float -1.000000e+00
  %615 = fadd fast float %596, 2.500000e-01
  %616 = fmul fast float %583, %615
  %617 = fmul fast float %584, %615
  %618 = fmul fast float %573, %615
  %619 = fadd fast float %616, %581
  %620 = fadd fast float %617, %582
  %621 = fadd fast float %618, %567
  %622 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %619, float %620, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %623 = extractvalue %dx.types.ResRet.f32 %622, 0
  %624 = fadd fast float %621, %595
  %625 = fsub fast float %624, %623
  %626 = call float @dx.op.unary.f32(i32 6, float %625)  ; FAbs(value)
  %627 = fcmp fast olt float %626, %595
  %628 = fcmp fast une float %623, %599
  %629 = and i1 %627, %628
  %630 = fcmp fast olt float %614, 0.000000e+00
  %631 = and i1 %630, %629
  %632 = select i1 %631, float %615, float %614
  %633 = fadd fast float %596, 3.750000e-01
  %634 = fmul fast float %583, %633
  %635 = fmul fast float %584, %633
  %636 = fmul fast float %573, %633
  %637 = fadd fast float %634, %581
  %638 = fadd fast float %635, %582
  %639 = fadd fast float %636, %567
  %640 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %637, float %638, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %641 = extractvalue %dx.types.ResRet.f32 %640, 0
  %642 = fadd fast float %639, %595
  %643 = fsub fast float %642, %641
  %644 = call float @dx.op.unary.f32(i32 6, float %643)  ; FAbs(value)
  %645 = fcmp fast olt float %644, %595
  %646 = fcmp fast une float %641, %599
  %647 = and i1 %645, %646
  %648 = fcmp fast olt float %632, 0.000000e+00
  %649 = and i1 %648, %647
  %650 = select i1 %649, float %633, float %632
  %651 = fadd fast float %596, 5.000000e-01
  %652 = fmul fast float %583, %651
  %653 = fmul fast float %584, %651
  %654 = fmul fast float %573, %651
  %655 = fadd fast float %652, %581
  %656 = fadd fast float %653, %582
  %657 = fadd fast float %654, %567
  %658 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %655, float %656, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %659 = extractvalue %dx.types.ResRet.f32 %658, 0
  %660 = fadd fast float %657, %595
  %661 = fsub fast float %660, %659
  %662 = call float @dx.op.unary.f32(i32 6, float %661)  ; FAbs(value)
  %663 = fcmp fast olt float %662, %595
  %664 = fcmp fast une float %659, %599
  %665 = and i1 %663, %664
  %666 = fcmp fast olt float %650, 0.000000e+00
  %667 = and i1 %666, %665
  %668 = select i1 %667, float %651, float %650
  %669 = fadd fast float %596, 6.250000e-01
  %670 = fmul fast float %583, %669
  %671 = fmul fast float %584, %669
  %672 = fmul fast float %573, %669
  %673 = fadd fast float %670, %581
  %674 = fadd fast float %671, %582
  %675 = fadd fast float %672, %567
  %676 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %673, float %674, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %677 = extractvalue %dx.types.ResRet.f32 %676, 0
  %678 = fadd fast float %675, %595
  %679 = fsub fast float %678, %677
  %680 = call float @dx.op.unary.f32(i32 6, float %679)  ; FAbs(value)
  %681 = fcmp fast olt float %680, %595
  %682 = fcmp fast une float %677, %599
  %683 = and i1 %681, %682
  %684 = fcmp fast olt float %668, 0.000000e+00
  %685 = and i1 %684, %683
  %686 = select i1 %685, float %669, float %668
  %687 = fadd fast float %596, 7.500000e-01
  %688 = fmul fast float %583, %687
  %689 = fmul fast float %584, %687
  %690 = fmul fast float %573, %687
  %691 = fadd fast float %688, %581
  %692 = fadd fast float %689, %582
  %693 = fadd fast float %690, %567
  %694 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %691, float %692, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %695 = extractvalue %dx.types.ResRet.f32 %694, 0
  %696 = fadd fast float %693, %595
  %697 = fsub fast float %696, %695
  %698 = call float @dx.op.unary.f32(i32 6, float %697)  ; FAbs(value)
  %699 = fcmp fast olt float %698, %595
  %700 = fcmp fast une float %695, %599
  %701 = and i1 %699, %700
  %702 = fcmp fast olt float %686, 0.000000e+00
  %703 = and i1 %702, %701
  %704 = select i1 %703, float %687, float %686
  %705 = fadd fast float %596, 8.750000e-01
  %706 = fmul fast float %583, %705
  %707 = fmul fast float %584, %705
  %708 = fmul fast float %573, %705
  %709 = fadd fast float %706, %581
  %710 = fadd fast float %707, %582
  %711 = fadd fast float %708, %567
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %709, float %710, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  %714 = fadd fast float %711, %595
  %715 = fsub fast float %714, %713
  %716 = call float @dx.op.unary.f32(i32 6, float %715)  ; FAbs(value)
  %717 = fcmp fast olt float %716, %595
  %718 = fcmp fast une float %713, %599
  %719 = and i1 %717, %718
  %720 = fcmp fast olt float %704, 0.000000e+00
  %721 = and i1 %720, %719
  %722 = select i1 %721, float %705, float %704
  %723 = fadd fast float %596, 1.000000e+00
  %724 = fmul fast float %583, %723
  %725 = fmul fast float %584, %723
  %726 = fmul fast float %573, %723
  %727 = fadd fast float %724, %581
  %728 = fadd fast float %725, %582
  %729 = fadd fast float %726, %567
  %730 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %32, %dx.types.Handle %33, float %727, float %728, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %731 = extractvalue %dx.types.ResRet.f32 %730, 0
  %732 = fadd fast float %729, %595
  %733 = fsub fast float %732, %731
  %734 = call float @dx.op.unary.f32(i32 6, float %733)  ; FAbs(value)
  %735 = fcmp fast olt float %734, %595
  %736 = fcmp fast une float %731, %599
  %737 = and i1 %735, %736
  %738 = fcmp fast olt float %722, 0.000000e+00
  %739 = and i1 %738, %737
  %740 = select i1 %739, float %723, float %722
  %741 = fcmp fast ogt float %740, 0.000000e+00
  br i1 %741, label %742, label %771

; <label>:742                                     ; preds = %508
  %743 = fmul fast float %740, %583
  %744 = fmul fast float %740, %584
  %745 = fadd fast float %743, %581
  %746 = fadd fast float %744, %582
  %747 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %47, %dx.types.Handle %33, float %745, float %746, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %748 = extractvalue %dx.types.ResRet.f32 %747, 3
  %749 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %33, float %745, float %746, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %750 = extractvalue %dx.types.ResRet.f32 %749, 3
  %751 = fmul fast float %750, 2.550000e+02
  %752 = fadd fast float %751, 5.000000e-01
  %753 = fptoui float %752 to i32
  %754 = and i32 %753, 15
  %755 = fmul fast float %748, 0x400FFDF3C0000000
  %756 = fptoui float %755 to i32
  %757 = and i32 %756, 1
  %758 = icmp ne i32 %757, 0
  %759 = icmp ne i32 %754, 9
  %760 = and i1 %758, %759
  %761 = zext i1 %760 to i32
  %762 = fcmp fast olt float %745, 1.000000e+00
  %763 = fcmp fast olt float %746, 1.000000e+00
  %764 = fcmp fast ogt float %745, 0.000000e+00
  %765 = fcmp fast ogt float %746, 0.000000e+00
  %766 = and i1 %764, %762
  %767 = and i1 %765, %763
  %768 = and i1 %766, %767
  %769 = fmul fast float %740, %506
  %770 = select i1 %768, float %769, float -1.000000e+00
  br label %771

; <label>:771                                     ; preds = %742, %508
  %772 = phi float [ %770, %742 ], [ -1.000000e+00, %508 ]
  %773 = phi i32 [ %761, %742 ], [ 0, %508 ]
  %774 = fcmp fast ogt float %772, 0.000000e+00
  br i1 %774, label %775, label %805

; <label>:775                                     ; preds = %771
  %776 = icmp ne i32 %773, 0
  %777 = select i1 %776, float %236, float %238
  %778 = fcmp fast ogt float %777, 0.000000e+00
  br i1 %778, label %779, label %800

; <label>:779                                     ; preds = %775
  %780 = add nsw i32 %92, -5
  %781 = icmp ult i32 %780, 3
  %782 = or i1 %101, %781
  %783 = or i1 %127, %782
  %784 = icmp ne i32 %92, 7
  %785 = and i1 %784, %783
  %786 = icmp ne i32 %92, 9
  %787 = and i1 %786, %785
  %788 = icmp ne i32 %92, 5
  %789 = and i1 %788, %787
  br i1 %789, label %790, label %800

; <label>:790                                     ; preds = %779
  %791 = call float @dx.op.binary.f32(i32 36, float %110, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %792 = fsub fast float 1.000000e+00, %791
  %793 = call float @dx.op.unary.f32(i32 23, float %792)  ; Log(value)
  %794 = fmul fast float %772, 0x3FA99999A0000000
  %795 = fmul fast float %794, %793
  %796 = call float @dx.op.unary.f32(i32 21, float %795)  ; Exp(value)
  %797 = call float @dx.op.unary.f32(i32 7, float %796)  ; Saturate(value)
  %798 = fsub fast float 1.000000e+00, %797
  %799 = fmul fast float %798, %777
  br label %800

; <label>:800                                     ; preds = %790, %779, %775
  %801 = phi float [ %799, %790 ], [ %777, %779 ], [ %777, %775 ]
  %802 = fsub fast float 1.000000e+00, %801
  %803 = fmul fast float %802, %499
  %804 = fmul fast float %802, %498
  br label %805

; <label>:805                                     ; preds = %800, %771, %496
  %806 = phi float [ %804, %800 ], [ %498, %771 ], [ %498, %496 ]
  %807 = phi float [ %803, %800 ], [ %499, %771 ], [ %499, %496 ]
  %808 = fadd fast float %807, %806
  %809 = fcmp fast ogt float %808, 0.000000e+00
  br i1 %809, label %810, label %3077, !dx.controlflow.hints !49

; <label>:810                                     ; preds = %805
  %811 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %812 = extractvalue %dx.types.CBufRet.f32 %811, 2
  %813 = call float @dx.op.binary.f32(i32 35, float %56, float %812)  ; FMax(a,b)
  %814 = call float @dx.op.unary.f32(i32 25, float %301)  ; Rsqrt(value)
  %815 = fmul fast float %814, %224
  %816 = fmul fast float %814, %225
  %817 = fmul fast float %814, %226
  %818 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %819 = fcmp fast ogt float %228, 0.000000e+00
  br i1 %819, label %820, label %835

; <label>:820                                     ; preds = %810
  %821 = fadd fast float %301, 1.000000e+00
  %822 = fdiv fast float 1.000000e+00, %821
  %823 = fmul fast float %228, %228
  %824 = fmul fast float %823, %822
  %825 = call float @dx.op.unary.f32(i32 7, float %824)  ; Saturate(value)
  %826 = call float @dx.op.unary.f32(i32 24, float %825)  ; Sqrt(value)
  %827 = fcmp fast olt float %818, %826
  br i1 %827, label %828, label %835

; <label>:828                                     ; preds = %820
  %829 = fsub fast float -0.000000e+00, %826
  %830 = call float @dx.op.binary.f32(i32 35, float %818, float %829)  ; FMax(a,b)
  %831 = fadd fast float %830, %826
  %832 = fmul fast float %831, %831
  %833 = fmul fast float %826, 4.000000e+00
  %834 = fdiv fast float %832, %833
  br label %835

; <label>:835                                     ; preds = %828, %820, %810
  %836 = phi float [ %818, %810 ], [ %834, %828 ], [ %818, %820 ]
  %837 = call float @dx.op.unary.f32(i32 7, float %836)  ; Saturate(value)
  %838 = call float @dx.op.binary.f32(i32 35, float %813, float %812)  ; FMax(a,b)
  %839 = fmul fast float %838, %838
  %840 = fmul fast float %814, %228
  %841 = fsub fast float 1.000000e+00, %839
  %842 = fmul fast float %840, %841
  %843 = call float @dx.op.unary.f32(i32 7, float %842)  ; Saturate(value)
  %844 = fmul fast float %814, %230
  %845 = call float @dx.op.unary.f32(i32 7, float %844)  ; Saturate(value)
  switch i32 %92, label %3023 [
    i32 1, label %846
    i32 10, label %846
    i32 11, label %846
    i32 2, label %1024
    i32 3, label %1313
    i32 4, label %1507
    i32 5, label %1847
    i32 6, label %2171
    i32 7, label %2368
    i32 8, label %2623
    i32 9, label %2845
  ]

; <label>:846                                     ; preds = %835, %835, %835
  %847 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %848 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %849 = fmul fast float %848, 2.000000e+00
  %850 = fadd fast float %849, 2.000000e+00
  %851 = call float @dx.op.unary.f32(i32 25, float %850)  ; Rsqrt(value)
  %852 = fadd fast float %847, %818
  %853 = fmul fast float %851, %852
  %854 = call float @dx.op.unary.f32(i32 7, float %853)  ; Saturate(value)
  %855 = fmul fast float %851, %848
  %856 = fadd fast float %855, %851
  %857 = call float @dx.op.unary.f32(i32 7, float %856)  ; Saturate(value)
  %858 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %858, label %859, label %948

; <label>:859                                     ; preds = %846
  %860 = fmul fast float %843, %843
  %861 = fsub fast float 1.000000e+00, %860
  %862 = call float @dx.op.unary.f32(i32 24, float %861)  ; Sqrt(value)
  %863 = fmul fast float %818, 2.000000e+00
  %864 = fmul fast float %863, %847
  %865 = fsub fast float %864, %848
  %866 = fcmp fast ult float %865, %862
  br i1 %866, label %869, label %867

; <label>:867                                     ; preds = %859
  %868 = call float @dx.op.unary.f32(i32 6, float %847)  ; FAbs(value)
  br label %948

; <label>:869                                     ; preds = %859
  %870 = fmul fast float %865, %865
  %871 = fsub fast float 1.000000e+00, %870
  %872 = call float @dx.op.unary.f32(i32 25, float %871)  ; Rsqrt(value)
  %873 = fmul fast float %872, %843
  %874 = fmul fast float %865, %818
  %875 = fsub fast float %847, %874
  %876 = fmul fast float %873, %875
  %877 = fmul fast float %847, %847
  %878 = fmul fast float %877, 2.000000e+00
  %879 = fadd fast float %878, -1.000000e+00
  %880 = fmul fast float %865, %848
  %881 = fsub fast float %879, %880
  %882 = fmul fast float %873, %881
  %883 = fmul fast float %818, %818
  %884 = fsub fast float 1.000000e+00, %883
  %885 = fsub fast float %884, %877
  %886 = fmul fast float %848, %848
  %887 = fsub fast float %885, %886
  %888 = fmul fast float %864, %848
  %889 = fadd fast float %887, %888
  %890 = call float @dx.op.unary.f32(i32 7, float %889)  ; Saturate(value)
  %891 = call float @dx.op.unary.f32(i32 24, float %890)  ; Sqrt(value)
  %892 = fmul fast float %891, %873
  %893 = fmul fast float %847, 2.000000e+00
  %894 = fmul fast float %893, %873
  %895 = fmul fast float %894, %891
  %896 = fmul fast float %862, %818
  %897 = fadd fast float %896, %847
  %898 = fadd fast float %897, %876
  %899 = fmul fast float %862, %848
  %900 = fadd fast float %899, 1.000000e+00
  %901 = fadd fast float %900, %882
  %902 = fmul fast float %892, %901
  %903 = fmul fast float %898, %901
  %904 = fmul fast float %895, %898
  %905 = fmul fast float %902, 5.000000e-01
  %906 = fmul fast float %898, 2.500000e-01
  %907 = fmul fast float %906, %895
  %908 = fsub fast float %907, %905
  %909 = fmul fast float %908, %903
  %910 = fmul fast float %902, %902
  %911 = fmul fast float %902, 2.000000e+00
  %912 = fsub fast float %904, %911
  %913 = fmul fast float %912, %904
  %914 = fadd fast float %913, %910
  %915 = fmul fast float %901, %901
  %916 = fmul fast float %915, %897
  %917 = fadd fast float %901, %899
  %918 = fmul fast float %917, 5.000000e-01
  %919 = fsub fast float -5.000000e-01, %918
  %920 = fmul fast float %919, %903
  %921 = fadd fast float %920, %916
  %922 = fmul fast float %921, %898
  %923 = fadd fast float %914, %922
  %924 = fmul fast float %909, 2.000000e+00
  %925 = fmul fast float %923, %923
  %926 = fmul fast float %909, %909
  %927 = fadd fast float %925, %926
  %928 = fdiv fast float %924, %927
  %929 = fmul fast float %923, %928
  %930 = fmul fast float %909, %928
  %931 = fsub fast float 1.000000e+00, %930
  %932 = fmul fast float %931, %876
  %933 = fmul fast float %929, %892
  %934 = fmul fast float %931, %882
  %935 = fmul fast float %929, %895
  %936 = fadd fast float %935, %899
  %937 = fadd fast float %936, %934
  %938 = fmul fast float %937, 2.000000e+00
  %939 = fadd fast float %938, 2.000000e+00
  %940 = call float @dx.op.unary.f32(i32 25, float %939)  ; Rsqrt(value)
  %941 = fadd fast float %897, %933
  %942 = fadd fast float %941, %932
  %943 = fmul fast float %942, %940
  %944 = call float @dx.op.unary.f32(i32 7, float %943)  ; Saturate(value)
  %945 = fmul fast float %937, %940
  %946 = fadd fast float %945, %940
  %947 = call float @dx.op.unary.f32(i32 7, float %946)  ; Saturate(value)
  br label %948

; <label>:948                                     ; preds = %869, %867, %846
  %949 = phi float [ %868, %867 ], [ %947, %869 ], [ %857, %846 ]
  %950 = phi float [ 1.000000e+00, %867 ], [ %944, %869 ], [ %854, %846 ]
  %951 = call float @dx.op.unary.f32(i32 6, float %847)  ; FAbs(value)
  %952 = fadd fast float %951, 0x3EE4F8B580000000
  %953 = call float @dx.op.unary.f32(i32 7, float %952)  ; Saturate(value)
  %954 = fmul fast float %185, 0x3FD45F3060000000
  %955 = fmul fast float %186, 0x3FD45F3060000000
  %956 = fmul fast float %187, 0x3FD45F3060000000
  %957 = fmul fast float %954, %837
  %958 = fmul fast float %955, %837
  %959 = fmul fast float %956, %837
  %960 = fmul fast float %813, %813
  %961 = fmul fast float %960, %960
  %962 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %962, label %963, label %970

; <label>:963                                     ; preds = %948
  %964 = fmul fast float %845, %845
  %965 = fmul fast float %949, 0x400CCCCCC0000000
  %966 = fadd fast float %965, 0x3FD99999A0000000
  %967 = fdiv fast float %964, %966
  %968 = fadd fast float %967, %961
  %969 = call float @dx.op.unary.f32(i32 7, float %968)  ; Saturate(value)
  br label %970

; <label>:970                                     ; preds = %963, %948
  %971 = phi float [ %969, %963 ], [ %961, %948 ]
  br i1 %858, label %972, label %985

; <label>:972                                     ; preds = %970
  %973 = fmul fast float %843, 2.500000e-01
  %974 = bitcast float %971 to i32
  %975 = ashr i32 %974, 1
  %976 = add nsw i32 %975, 532487669
  %977 = bitcast i32 %976 to float
  %978 = fmul fast float %977, 3.000000e+00
  %979 = fadd fast float %978, %843
  %980 = fmul fast float %973, %979
  %981 = fadd fast float %949, 0x3F50624DE0000000
  %982 = fdiv fast float %980, %981
  %983 = fadd fast float %982, %971
  %984 = fdiv fast float %971, %983
  br label %985

; <label>:985                                     ; preds = %972, %970
  %986 = phi float [ %984, %972 ], [ 1.000000e+00, %970 ]
  %987 = fmul fast float %971, %950
  %988 = fsub fast float %987, %950
  %989 = fmul fast float %988, %950
  %990 = fadd fast float %989, 1.000000e+00
  %991 = fmul fast float %990, %990
  %992 = fmul fast float %991, 0x400921FB60000000
  %993 = fdiv fast float %971, %992
  %994 = fmul fast float %993, %986
  %995 = call float @dx.op.unary.f32(i32 24, float %971)  ; Sqrt(value)
  %996 = fsub fast float 1.000000e+00, %995
  %997 = fmul fast float %996, %953
  %998 = fadd fast float %997, %995
  %999 = fmul fast float %998, %837
  %1000 = fmul fast float %996, %837
  %1001 = fadd fast float %1000, %995
  %1002 = fmul fast float %1001, %953
  %1003 = fadd fast float %999, %1002
  %1004 = fdiv fast float 5.000000e-01, %1003
  %1005 = fsub fast float 1.000000e+00, %949
  %1006 = fmul fast float %1005, %1005
  %1007 = fmul fast float %1006, %1006
  %1008 = fmul fast float %1007, %1005
  %1009 = fmul fast float %197, 5.000000e+01
  %1010 = call float @dx.op.unary.f32(i32 7, float %1009)  ; Saturate(value)
  %1011 = fmul fast float %1010, %1008
  %1012 = fsub fast float 1.000000e+00, %1008
  %1013 = fmul fast float %1012, %196
  %1014 = fmul fast float %1012, %197
  %1015 = fmul fast float %1012, %198
  %1016 = fadd fast float %1011, %1013
  %1017 = fadd fast float %1011, %1014
  %1018 = fadd fast float %1011, %1015
  %1019 = fmul fast float %994, %1004
  %1020 = fmul fast float %1019, %837
  %1021 = fmul fast float %1020, %1016
  %1022 = fmul fast float %1020, %1017
  %1023 = fmul fast float %1020, %1018
  br label %3023

; <label>:1024                                    ; preds = %835
  %1025 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1026 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %1027 = fmul fast float %1026, 2.000000e+00
  %1028 = fadd fast float %1027, 2.000000e+00
  %1029 = call float @dx.op.unary.f32(i32 25, float %1028)  ; Rsqrt(value)
  %1030 = fadd fast float %1025, %818
  %1031 = fmul fast float %1029, %1030
  %1032 = call float @dx.op.unary.f32(i32 7, float %1031)  ; Saturate(value)
  %1033 = fmul fast float %1029, %1026
  %1034 = fadd fast float %1033, %1029
  %1035 = call float @dx.op.unary.f32(i32 7, float %1034)  ; Saturate(value)
  %1036 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %1036, label %1037, label %1126

; <label>:1037                                    ; preds = %1024
  %1038 = fmul fast float %843, %843
  %1039 = fsub fast float 1.000000e+00, %1038
  %1040 = call float @dx.op.unary.f32(i32 24, float %1039)  ; Sqrt(value)
  %1041 = fmul fast float %818, 2.000000e+00
  %1042 = fmul fast float %1041, %1025
  %1043 = fsub fast float %1042, %1026
  %1044 = fcmp fast ult float %1043, %1040
  br i1 %1044, label %1047, label %1045

; <label>:1045                                    ; preds = %1037
  %1046 = call float @dx.op.unary.f32(i32 6, float %1025)  ; FAbs(value)
  br label %1126

; <label>:1047                                    ; preds = %1037
  %1048 = fmul fast float %1043, %1043
  %1049 = fsub fast float 1.000000e+00, %1048
  %1050 = call float @dx.op.unary.f32(i32 25, float %1049)  ; Rsqrt(value)
  %1051 = fmul fast float %1050, %843
  %1052 = fmul fast float %1043, %818
  %1053 = fsub fast float %1025, %1052
  %1054 = fmul fast float %1051, %1053
  %1055 = fmul fast float %1025, %1025
  %1056 = fmul fast float %1055, 2.000000e+00
  %1057 = fadd fast float %1056, -1.000000e+00
  %1058 = fmul fast float %1043, %1026
  %1059 = fsub fast float %1057, %1058
  %1060 = fmul fast float %1051, %1059
  %1061 = fmul fast float %818, %818
  %1062 = fsub fast float 1.000000e+00, %1061
  %1063 = fsub fast float %1062, %1055
  %1064 = fmul fast float %1026, %1026
  %1065 = fsub fast float %1063, %1064
  %1066 = fmul fast float %1042, %1026
  %1067 = fadd fast float %1065, %1066
  %1068 = call float @dx.op.unary.f32(i32 7, float %1067)  ; Saturate(value)
  %1069 = call float @dx.op.unary.f32(i32 24, float %1068)  ; Sqrt(value)
  %1070 = fmul fast float %1069, %1051
  %1071 = fmul fast float %1025, 2.000000e+00
  %1072 = fmul fast float %1071, %1051
  %1073 = fmul fast float %1072, %1069
  %1074 = fmul fast float %1040, %818
  %1075 = fadd fast float %1074, %1025
  %1076 = fadd fast float %1075, %1054
  %1077 = fmul fast float %1040, %1026
  %1078 = fadd fast float %1077, 1.000000e+00
  %1079 = fadd fast float %1078, %1060
  %1080 = fmul fast float %1070, %1079
  %1081 = fmul fast float %1076, %1079
  %1082 = fmul fast float %1073, %1076
  %1083 = fmul fast float %1080, 5.000000e-01
  %1084 = fmul fast float %1076, 2.500000e-01
  %1085 = fmul fast float %1084, %1073
  %1086 = fsub fast float %1085, %1083
  %1087 = fmul fast float %1086, %1081
  %1088 = fmul fast float %1080, %1080
  %1089 = fmul fast float %1080, 2.000000e+00
  %1090 = fsub fast float %1082, %1089
  %1091 = fmul fast float %1090, %1082
  %1092 = fadd fast float %1091, %1088
  %1093 = fmul fast float %1079, %1079
  %1094 = fmul fast float %1093, %1075
  %1095 = fadd fast float %1079, %1077
  %1096 = fmul fast float %1095, 5.000000e-01
  %1097 = fsub fast float -5.000000e-01, %1096
  %1098 = fmul fast float %1097, %1081
  %1099 = fadd fast float %1098, %1094
  %1100 = fmul fast float %1099, %1076
  %1101 = fadd fast float %1092, %1100
  %1102 = fmul fast float %1087, 2.000000e+00
  %1103 = fmul fast float %1101, %1101
  %1104 = fmul fast float %1087, %1087
  %1105 = fadd fast float %1103, %1104
  %1106 = fdiv fast float %1102, %1105
  %1107 = fmul fast float %1101, %1106
  %1108 = fmul fast float %1087, %1106
  %1109 = fsub fast float 1.000000e+00, %1108
  %1110 = fmul fast float %1109, %1054
  %1111 = fmul fast float %1107, %1070
  %1112 = fmul fast float %1109, %1060
  %1113 = fmul fast float %1107, %1073
  %1114 = fadd fast float %1113, %1077
  %1115 = fadd fast float %1114, %1112
  %1116 = fmul fast float %1115, 2.000000e+00
  %1117 = fadd fast float %1116, 2.000000e+00
  %1118 = call float @dx.op.unary.f32(i32 25, float %1117)  ; Rsqrt(value)
  %1119 = fadd fast float %1075, %1111
  %1120 = fadd fast float %1119, %1110
  %1121 = fmul fast float %1120, %1118
  %1122 = call float @dx.op.unary.f32(i32 7, float %1121)  ; Saturate(value)
  %1123 = fmul fast float %1115, %1118
  %1124 = fadd fast float %1123, %1118
  %1125 = call float @dx.op.unary.f32(i32 7, float %1124)  ; Saturate(value)
  br label %1126

; <label>:1126                                    ; preds = %1047, %1045, %1024
  %1127 = phi float [ %1046, %1045 ], [ %1125, %1047 ], [ %1035, %1024 ]
  %1128 = phi float [ 1.000000e+00, %1045 ], [ %1122, %1047 ], [ %1032, %1024 ]
  %1129 = call float @dx.op.unary.f32(i32 6, float %1025)  ; FAbs(value)
  %1130 = fadd fast float %1129, 0x3EE4F8B580000000
  %1131 = call float @dx.op.unary.f32(i32 7, float %1130)  ; Saturate(value)
  %1132 = fmul fast float %185, 0x3FD45F3060000000
  %1133 = fmul fast float %186, 0x3FD45F3060000000
  %1134 = fmul fast float %187, 0x3FD45F3060000000
  %1135 = fmul fast float %1132, %837
  %1136 = fmul fast float %1133, %837
  %1137 = fmul fast float %1134, %837
  %1138 = fmul fast float %813, %813
  %1139 = fmul fast float %1138, %1138
  %1140 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %1140, label %1141, label %1148

; <label>:1141                                    ; preds = %1126
  %1142 = fmul fast float %845, %845
  %1143 = fmul fast float %1127, 0x400CCCCCC0000000
  %1144 = fadd fast float %1143, 0x3FD99999A0000000
  %1145 = fdiv fast float %1142, %1144
  %1146 = fadd fast float %1145, %1139
  %1147 = call float @dx.op.unary.f32(i32 7, float %1146)  ; Saturate(value)
  br label %1148

; <label>:1148                                    ; preds = %1141, %1126
  %1149 = phi float [ %1147, %1141 ], [ %1139, %1126 ]
  br i1 %1036, label %1150, label %1163

; <label>:1150                                    ; preds = %1148
  %1151 = fmul fast float %843, 2.500000e-01
  %1152 = bitcast float %1149 to i32
  %1153 = ashr i32 %1152, 1
  %1154 = add nsw i32 %1153, 532487669
  %1155 = bitcast i32 %1154 to float
  %1156 = fmul fast float %1155, 3.000000e+00
  %1157 = fadd fast float %1156, %843
  %1158 = fmul fast float %1151, %1157
  %1159 = fadd fast float %1127, 0x3F50624DE0000000
  %1160 = fdiv fast float %1158, %1159
  %1161 = fadd fast float %1160, %1149
  %1162 = fdiv fast float %1149, %1161
  br label %1163

; <label>:1163                                    ; preds = %1150, %1148
  %1164 = phi float [ %1162, %1150 ], [ 1.000000e+00, %1148 ]
  %1165 = fmul fast float %1149, %1128
  %1166 = fsub fast float %1165, %1128
  %1167 = fmul fast float %1166, %1128
  %1168 = fadd fast float %1167, 1.000000e+00
  %1169 = fmul fast float %1168, %1168
  %1170 = fmul fast float %1169, 0x400921FB60000000
  %1171 = fdiv fast float %1149, %1170
  %1172 = fmul fast float %1171, %1164
  %1173 = call float @dx.op.unary.f32(i32 24, float %1149)  ; Sqrt(value)
  %1174 = fsub fast float 1.000000e+00, %1173
  %1175 = fmul fast float %1174, %1131
  %1176 = fadd fast float %1175, %1173
  %1177 = fmul fast float %1176, %837
  %1178 = fmul fast float %1174, %837
  %1179 = fadd fast float %1178, %1173
  %1180 = fmul fast float %1179, %1131
  %1181 = fadd fast float %1177, %1180
  %1182 = fdiv fast float 5.000000e-01, %1181
  %1183 = fsub fast float 1.000000e+00, %1127
  %1184 = fmul fast float %1183, %1183
  %1185 = fmul fast float %1184, %1184
  %1186 = fmul fast float %1185, %1183
  %1187 = fmul fast float %197, 5.000000e+01
  %1188 = call float @dx.op.unary.f32(i32 7, float %1187)  ; Saturate(value)
  %1189 = fmul fast float %1188, %1186
  %1190 = fsub fast float 1.000000e+00, %1186
  %1191 = fmul fast float %1190, %196
  %1192 = fmul fast float %1190, %197
  %1193 = fmul fast float %1190, %198
  %1194 = fadd fast float %1189, %1191
  %1195 = fadd fast float %1189, %1192
  %1196 = fadd fast float %1189, %1193
  %1197 = fmul fast float %1172, %1182
  %1198 = fmul fast float %1197, %837
  %1199 = fmul fast float %1198, %1194
  %1200 = fmul fast float %1198, %1195
  %1201 = fmul fast float %1198, %1196
  %1202 = fmul fast float %107, %107
  %1203 = fmul fast float %108, %108
  %1204 = fmul fast float %109, %109
  %1205 = call float @dx.op.dot3.f32(i32 55, float %815, float %816, float %817, float %216, float %217, float %218)  ; Dot3(ax,ay,az,bx,by,bz)
  %1206 = call float @dx.op.unary.f32(i32 7, float %1205)  ; Saturate(value)
  %1207 = call float @dx.op.unary.f32(i32 23, float %1206)  ; Log(value)
  %1208 = fmul fast float %1207, 1.200000e+01
  %1209 = call float @dx.op.unary.f32(i32 21, float %1208)  ; Exp(value)
  %1210 = fmul fast float %110, 0x4007333340000000
  %1211 = fsub fast float 3.000000e+00, %1210
  %1212 = fmul fast float %1209, %1211
  %1213 = fmul fast float %818, 0x3FE5555560000000
  %1214 = fadd fast float %1213, 0x3FD5555560000000
  %1215 = call float @dx.op.unary.f32(i32 7, float %1214)  ; Saturate(value)
  %1216 = call float @dx.op.unary.f32(i32 23, float %1215)  ; Log(value)
  %1217 = fmul fast float %1216, 1.500000e+00
  %1218 = call float @dx.op.unary.f32(i32 21, float %1217)  ; Exp(value)
  %1219 = fmul fast float %1218, 0x3FFAAAAAA0000000
  %1220 = fadd fast float %1219, -1.000000e+00
  %1221 = fmul fast float %1220, %110
  %1222 = fadd fast float %1221, 1.000000e+00
  %1223 = fmul fast float %1222, 0x3FC45F3060000000
  %1224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %1225 = extractvalue %dx.types.CBufRet.f32 %1224, 3
  %1226 = call float @dx.op.binary.f32(i32 35, float %1202, float 0x3D71979980000000)  ; FMax(a,b)
  %1227 = call float @dx.op.binary.f32(i32 35, float %1203, float 0x3D71979980000000)  ; FMax(a,b)
  %1228 = call float @dx.op.binary.f32(i32 35, float %1204, float 0x3D71979980000000)  ; FMax(a,b)
  %1229 = call float @dx.op.binary.f32(i32 36, float %1226, float 1.000000e+00)  ; FMin(a,b)
  %1230 = call float @dx.op.binary.f32(i32 36, float %1227, float 1.000000e+00)  ; FMin(a,b)
  %1231 = call float @dx.op.binary.f32(i32 36, float %1228, float 1.000000e+00)  ; FMin(a,b)
  %1232 = call float @dx.op.unary.f32(i32 23, float %1229)  ; Log(value)
  %1233 = call float @dx.op.unary.f32(i32 23, float %1230)  ; Log(value)
  %1234 = call float @dx.op.unary.f32(i32 23, float %1231)  ; Log(value)
  %1235 = fmul fast float %1232, 0xBFE62E4300000000
  %1236 = fmul fast float %1233, 0xBFE62E4300000000
  %1237 = fmul fast float %1234, 0xBFE62E4300000000
  %1238 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %1225)  ; FMax(a,b)
  %1239 = fdiv fast float %1235, %1238
  %1240 = fdiv fast float %1236, %1238
  %1241 = fdiv fast float %1237, %1238
  %1242 = fmul fast float %1239, 0xBFF7154760000000
  %1243 = fmul fast float %1240, 0xBFF7154760000000
  %1244 = fmul fast float %1241, 0xBFF7154760000000
  %1245 = call float @dx.op.unary.f32(i32 21, float %1242)  ; Exp(value)
  %1246 = call float @dx.op.unary.f32(i32 21, float %1243)  ; Exp(value)
  %1247 = call float @dx.op.unary.f32(i32 21, float %1244)  ; Exp(value)
  %1248 = fcmp fast olt float %1246, %1247
  br i1 %1248, label %1250, label %1249

; <label>:1249                                    ; preds = %1163
  br label %1250

; <label>:1250                                    ; preds = %1249, %1163
  %1251 = phi float [ %1246, %1249 ], [ %1247, %1163 ]
  %1252 = phi float [ %1247, %1249 ], [ %1246, %1163 ]
  %1253 = phi float [ 0.000000e+00, %1249 ], [ -1.000000e+00, %1163 ]
  %1254 = phi float [ 0xBFD5555560000000, %1249 ], [ 0x3FE5555560000000, %1163 ]
  %1255 = fcmp fast olt float %1245, %1251
  %1256 = select i1 %1255, float %1251, float %1245
  %1257 = select i1 %1255, float %1254, float %1253
  %1258 = select i1 %1255, float %1245, float %1251
  %1259 = call float @dx.op.binary.f32(i32 36, float %1258, float %1252)  ; FMin(a,b)
  %1260 = fsub fast float %1256, %1259
  %1261 = fsub fast float %1258, %1252
  %1262 = fmul fast float %1260, 6.000000e+00
  %1263 = fadd fast float %1262, 0x3DDB7CDFE0000000
  %1264 = fdiv fast float %1261, %1263
  %1265 = fadd fast float %1264, %1257
  %1266 = call float @dx.op.unary.f32(i32 6, float %1265)  ; FAbs(value)
  %1267 = fadd fast float %1256, 0x3DDB7CDFE0000000
  %1268 = fdiv fast float %1260, %1267
  %1269 = fcmp fast olt float %1203, %1204
  %1270 = select i1 %1269, float %1204, float %1203
  %1271 = fcmp fast olt float %1202, %1270
  %1272 = select i1 %1271, float %1270, float %1202
  %1273 = fmul fast float %1266, 6.000000e+00
  %1274 = fadd fast float %1273, -3.000000e+00
  %1275 = call float @dx.op.unary.f32(i32 6, float %1274)  ; FAbs(value)
  %1276 = fadd fast float %1275, -1.000000e+00
  %1277 = fadd fast float %1273, -2.000000e+00
  %1278 = call float @dx.op.unary.f32(i32 6, float %1277)  ; FAbs(value)
  %1279 = fsub fast float 2.000000e+00, %1278
  %1280 = fadd fast float %1273, -4.000000e+00
  %1281 = call float @dx.op.unary.f32(i32 6, float %1280)  ; FAbs(value)
  %1282 = fsub fast float 2.000000e+00, %1281
  %1283 = call float @dx.op.unary.f32(i32 7, float %1276)  ; Saturate(value)
  %1284 = call float @dx.op.unary.f32(i32 7, float %1279)  ; Saturate(value)
  %1285 = call float @dx.op.unary.f32(i32 7, float %1282)  ; Saturate(value)
  %1286 = fadd fast float %1283, -1.000000e+00
  %1287 = fadd fast float %1284, -1.000000e+00
  %1288 = fadd fast float %1285, -1.000000e+00
  %1289 = fmul fast float %1286, %1268
  %1290 = fmul fast float %1287, %1268
  %1291 = fmul fast float %1288, %1268
  %1292 = fadd fast float %1289, 1.000000e+00
  %1293 = fadd fast float %1290, 1.000000e+00
  %1294 = fadd fast float %1291, 1.000000e+00
  %1295 = fmul fast float %1292, %1272
  %1296 = fmul fast float %1293, %1272
  %1297 = fmul fast float %1294, %1272
  %1298 = fsub fast float 1.000000e+00, %1223
  %1299 = fmul fast float %1212, %1298
  %1300 = fadd fast float %1299, %1223
  %1301 = fsub fast float %1202, %1295
  %1302 = fsub fast float %1203, %1296
  %1303 = fsub fast float %1204, %1297
  %1304 = fmul fast float %1301, %497
  %1305 = fmul fast float %1302, %497
  %1306 = fmul fast float %1303, %497
  %1307 = fadd fast float %1304, %1295
  %1308 = fadd fast float %1305, %1296
  %1309 = fadd fast float %1306, %1297
  %1310 = fmul fast float %1307, %1300
  %1311 = fmul fast float %1308, %1300
  %1312 = fmul fast float %1309, %1300
  br label %3023

; <label>:1313                                    ; preds = %835
  %1314 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1315 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %1316 = fmul fast float %1315, 2.000000e+00
  %1317 = fadd fast float %1316, 2.000000e+00
  %1318 = call float @dx.op.unary.f32(i32 25, float %1317)  ; Rsqrt(value)
  %1319 = fadd fast float %1314, %818
  %1320 = fmul fast float %1318, %1319
  %1321 = call float @dx.op.unary.f32(i32 7, float %1320)  ; Saturate(value)
  %1322 = fmul fast float %1318, %1315
  %1323 = fadd fast float %1322, %1318
  %1324 = call float @dx.op.unary.f32(i32 7, float %1323)  ; Saturate(value)
  %1325 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %1325, label %1326, label %1415

; <label>:1326                                    ; preds = %1313
  %1327 = fmul fast float %843, %843
  %1328 = fsub fast float 1.000000e+00, %1327
  %1329 = call float @dx.op.unary.f32(i32 24, float %1328)  ; Sqrt(value)
  %1330 = fmul fast float %818, 2.000000e+00
  %1331 = fmul fast float %1330, %1314
  %1332 = fsub fast float %1331, %1315
  %1333 = fcmp fast ult float %1332, %1329
  br i1 %1333, label %1336, label %1334

; <label>:1334                                    ; preds = %1326
  %1335 = call float @dx.op.unary.f32(i32 6, float %1314)  ; FAbs(value)
  br label %1415

; <label>:1336                                    ; preds = %1326
  %1337 = fmul fast float %1332, %1332
  %1338 = fsub fast float 1.000000e+00, %1337
  %1339 = call float @dx.op.unary.f32(i32 25, float %1338)  ; Rsqrt(value)
  %1340 = fmul fast float %1339, %843
  %1341 = fmul fast float %1332, %818
  %1342 = fsub fast float %1314, %1341
  %1343 = fmul fast float %1340, %1342
  %1344 = fmul fast float %1314, %1314
  %1345 = fmul fast float %1344, 2.000000e+00
  %1346 = fadd fast float %1345, -1.000000e+00
  %1347 = fmul fast float %1332, %1315
  %1348 = fsub fast float %1346, %1347
  %1349 = fmul fast float %1340, %1348
  %1350 = fmul fast float %818, %818
  %1351 = fsub fast float 1.000000e+00, %1350
  %1352 = fsub fast float %1351, %1344
  %1353 = fmul fast float %1315, %1315
  %1354 = fsub fast float %1352, %1353
  %1355 = fmul fast float %1331, %1315
  %1356 = fadd fast float %1354, %1355
  %1357 = call float @dx.op.unary.f32(i32 7, float %1356)  ; Saturate(value)
  %1358 = call float @dx.op.unary.f32(i32 24, float %1357)  ; Sqrt(value)
  %1359 = fmul fast float %1358, %1340
  %1360 = fmul fast float %1314, 2.000000e+00
  %1361 = fmul fast float %1360, %1340
  %1362 = fmul fast float %1361, %1358
  %1363 = fmul fast float %1329, %818
  %1364 = fadd fast float %1363, %1314
  %1365 = fadd fast float %1364, %1343
  %1366 = fmul fast float %1329, %1315
  %1367 = fadd fast float %1366, 1.000000e+00
  %1368 = fadd fast float %1367, %1349
  %1369 = fmul fast float %1359, %1368
  %1370 = fmul fast float %1365, %1368
  %1371 = fmul fast float %1362, %1365
  %1372 = fmul fast float %1369, 5.000000e-01
  %1373 = fmul fast float %1365, 2.500000e-01
  %1374 = fmul fast float %1373, %1362
  %1375 = fsub fast float %1374, %1372
  %1376 = fmul fast float %1375, %1370
  %1377 = fmul fast float %1369, %1369
  %1378 = fmul fast float %1369, 2.000000e+00
  %1379 = fsub fast float %1371, %1378
  %1380 = fmul fast float %1379, %1371
  %1381 = fadd fast float %1380, %1377
  %1382 = fmul fast float %1368, %1368
  %1383 = fmul fast float %1382, %1364
  %1384 = fadd fast float %1368, %1366
  %1385 = fmul fast float %1384, 5.000000e-01
  %1386 = fsub fast float -5.000000e-01, %1385
  %1387 = fmul fast float %1386, %1370
  %1388 = fadd fast float %1387, %1383
  %1389 = fmul fast float %1388, %1365
  %1390 = fadd fast float %1381, %1389
  %1391 = fmul fast float %1376, 2.000000e+00
  %1392 = fmul fast float %1390, %1390
  %1393 = fmul fast float %1376, %1376
  %1394 = fadd fast float %1392, %1393
  %1395 = fdiv fast float %1391, %1394
  %1396 = fmul fast float %1390, %1395
  %1397 = fmul fast float %1376, %1395
  %1398 = fsub fast float 1.000000e+00, %1397
  %1399 = fmul fast float %1398, %1343
  %1400 = fmul fast float %1396, %1359
  %1401 = fmul fast float %1398, %1349
  %1402 = fmul fast float %1396, %1362
  %1403 = fadd fast float %1402, %1366
  %1404 = fadd fast float %1403, %1401
  %1405 = fmul fast float %1404, 2.000000e+00
  %1406 = fadd fast float %1405, 2.000000e+00
  %1407 = call float @dx.op.unary.f32(i32 25, float %1406)  ; Rsqrt(value)
  %1408 = fadd fast float %1364, %1400
  %1409 = fadd fast float %1408, %1399
  %1410 = fmul fast float %1409, %1407
  %1411 = call float @dx.op.unary.f32(i32 7, float %1410)  ; Saturate(value)
  %1412 = fmul fast float %1404, %1407
  %1413 = fadd fast float %1412, %1407
  %1414 = call float @dx.op.unary.f32(i32 7, float %1413)  ; Saturate(value)
  br label %1415

; <label>:1415                                    ; preds = %1336, %1334, %1313
  %1416 = phi float [ %1335, %1334 ], [ %1414, %1336 ], [ %1324, %1313 ]
  %1417 = phi float [ 1.000000e+00, %1334 ], [ %1411, %1336 ], [ %1321, %1313 ]
  %1418 = call float @dx.op.unary.f32(i32 6, float %1314)  ; FAbs(value)
  %1419 = fadd fast float %1418, 0x3EE4F8B580000000
  %1420 = call float @dx.op.unary.f32(i32 7, float %1419)  ; Saturate(value)
  %1421 = fmul fast float %185, 0x3FD45F3060000000
  %1422 = fmul fast float %186, 0x3FD45F3060000000
  %1423 = fmul fast float %187, 0x3FD45F3060000000
  %1424 = fmul fast float %1421, %837
  %1425 = fmul fast float %1422, %837
  %1426 = fmul fast float %1423, %837
  %1427 = fmul fast float %813, %813
  %1428 = fmul fast float %1427, %1427
  %1429 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %1429, label %1430, label %1437

; <label>:1430                                    ; preds = %1415
  %1431 = fmul fast float %845, %845
  %1432 = fmul fast float %1416, 0x400CCCCCC0000000
  %1433 = fadd fast float %1432, 0x3FD99999A0000000
  %1434 = fdiv fast float %1431, %1433
  %1435 = fadd fast float %1434, %1428
  %1436 = call float @dx.op.unary.f32(i32 7, float %1435)  ; Saturate(value)
  br label %1437

; <label>:1437                                    ; preds = %1430, %1415
  %1438 = phi float [ %1436, %1430 ], [ %1428, %1415 ]
  br i1 %1325, label %1439, label %1452

; <label>:1439                                    ; preds = %1437
  %1440 = fmul fast float %843, 2.500000e-01
  %1441 = bitcast float %1438 to i32
  %1442 = ashr i32 %1441, 1
  %1443 = add nsw i32 %1442, 532487669
  %1444 = bitcast i32 %1443 to float
  %1445 = fmul fast float %1444, 3.000000e+00
  %1446 = fadd fast float %1445, %843
  %1447 = fmul fast float %1440, %1446
  %1448 = fadd fast float %1416, 0x3F50624DE0000000
  %1449 = fdiv fast float %1447, %1448
  %1450 = fadd fast float %1449, %1438
  %1451 = fdiv fast float %1438, %1450
  br label %1452

; <label>:1452                                    ; preds = %1439, %1437
  %1453 = phi float [ %1451, %1439 ], [ 1.000000e+00, %1437 ]
  %1454 = fmul fast float %1438, %1417
  %1455 = fsub fast float %1454, %1417
  %1456 = fmul fast float %1455, %1417
  %1457 = fadd fast float %1456, 1.000000e+00
  %1458 = fmul fast float %1457, %1457
  %1459 = fmul fast float %1458, 0x400921FB60000000
  %1460 = fdiv fast float %1438, %1459
  %1461 = fmul fast float %1460, %1453
  %1462 = call float @dx.op.unary.f32(i32 24, float %1438)  ; Sqrt(value)
  %1463 = fsub fast float 1.000000e+00, %1462
  %1464 = fmul fast float %1463, %1420
  %1465 = fadd fast float %1464, %1462
  %1466 = fmul fast float %1465, %837
  %1467 = fmul fast float %1463, %837
  %1468 = fadd fast float %1467, %1462
  %1469 = fmul fast float %1468, %1420
  %1470 = fadd fast float %1466, %1469
  %1471 = fdiv fast float 5.000000e-01, %1470
  %1472 = fsub fast float 1.000000e+00, %1416
  %1473 = fmul fast float %1472, %1472
  %1474 = fmul fast float %1473, %1473
  %1475 = fmul fast float %1474, %1472
  %1476 = fmul fast float %197, 5.000000e+01
  %1477 = call float @dx.op.unary.f32(i32 7, float %1476)  ; Saturate(value)
  %1478 = fmul fast float %1477, %1475
  %1479 = fsub fast float 1.000000e+00, %1475
  %1480 = fmul fast float %1479, %196
  %1481 = fmul fast float %1479, %197
  %1482 = fmul fast float %1479, %198
  %1483 = fadd fast float %1478, %1480
  %1484 = fadd fast float %1478, %1481
  %1485 = fadd fast float %1478, %1482
  %1486 = fmul fast float %1461, %1471
  %1487 = fmul fast float %1486, %837
  %1488 = fmul fast float %1487, %1483
  %1489 = fmul fast float %1487, %1484
  %1490 = fmul fast float %1487, %1485
  %1491 = fmul fast float %107, %107
  %1492 = fmul fast float %108, %108
  %1493 = fmul fast float %109, %109
  %1494 = fmul fast float %818, 5.000000e-01
  %1495 = fadd fast float %1494, 5.000000e-01
  %1496 = call float @dx.op.unary.f32(i32 7, float %1495)  ; Saturate(value)
  %1497 = fsub fast float 1.000000e+00, %110
  %1498 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1499 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1500 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1498, %dx.types.Handle %1499, float %1496, float %1497, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1501 = extractvalue %dx.types.ResRet.f32 %1500, 0
  %1502 = extractvalue %dx.types.ResRet.f32 %1500, 1
  %1503 = extractvalue %dx.types.ResRet.f32 %1500, 2
  %1504 = fmul fast float %1491, %1501
  %1505 = fmul fast float %1492, %1502
  %1506 = fmul fast float %1493, %1503
  br label %3023

; <label>:1507                                    ; preds = %835
  %1508 = call float @dx.op.binary.f32(i32 35, float %108, float 0x3F947AE140000000)  ; FMax(a,b)
  %1509 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1510 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %1511 = fmul fast float %1510, 2.000000e+00
  %1512 = fadd fast float %1511, 2.000000e+00
  %1513 = call float @dx.op.unary.f32(i32 25, float %1512)  ; Rsqrt(value)
  %1514 = fadd fast float %1509, %818
  %1515 = fmul fast float %1513, %1514
  %1516 = call float @dx.op.unary.f32(i32 7, float %1515)  ; Saturate(value)
  %1517 = fmul fast float %1513, %1510
  %1518 = fadd fast float %1517, %1513
  %1519 = call float @dx.op.unary.f32(i32 7, float %1518)  ; Saturate(value)
  %1520 = fmul fast float %813, %813
  %1521 = fsub fast float 1.000000e+00, %1520
  %1522 = fmul fast float %1508, %1508
  %1523 = fcmp fast ogt float %1521, 0.000000e+00
  %1524 = fsub fast float 1.000000e+00, %1522
  %1525 = fdiv fast float %1524, %1521
  %1526 = select i1 %1523, float %1525, float 0.000000e+00
  %1527 = fmul fast float %1526, %843
  %1528 = call float @dx.op.unary.f32(i32 7, float %1527)  ; Saturate(value)
  %1529 = fcmp fast ogt float %1528, 0.000000e+00
  br i1 %1529, label %1530, label %1620

; <label>:1530                                    ; preds = %1507
  %1531 = fmul fast float %1528, %1528
  %1532 = fsub fast float 1.000000e+00, %1531
  %1533 = call float @dx.op.unary.f32(i32 24, float %1532)  ; Sqrt(value)
  %1534 = fmul fast float %818, 2.000000e+00
  %1535 = fmul fast float %1534, %1509
  %1536 = fsub fast float %1535, %1510
  %1537 = fcmp fast ult float %1536, %1533
  br i1 %1537, label %1540, label %1538

; <label>:1538                                    ; preds = %1530
  %1539 = call float @dx.op.unary.f32(i32 6, float %1509)  ; FAbs(value)
  br label %1620

; <label>:1540                                    ; preds = %1530
  %1541 = fmul fast float %1536, %1536
  %1542 = fsub fast float 1.000000e+00, %1541
  %1543 = call float @dx.op.unary.f32(i32 25, float %1542)  ; Rsqrt(value)
  %1544 = fmul fast float %1543, %1528
  %1545 = fmul fast float %1536, %818
  %1546 = fsub fast float %1509, %1545
  %1547 = fmul fast float %1544, %1546
  %1548 = fmul fast float %1509, %1509
  %1549 = fmul fast float %1548, 2.000000e+00
  %1550 = fadd fast float %1549, -1.000000e+00
  %1551 = fmul fast float %1536, %1510
  %1552 = fsub fast float %1550, %1551
  %1553 = fmul fast float %1544, %1552
  %1554 = fmul fast float %818, %818
  %1555 = fsub fast float 1.000000e+00, %1554
  %1556 = fsub fast float %1555, %1548
  %1557 = fmul fast float %1510, %1510
  %1558 = fsub fast float %1556, %1557
  %1559 = fmul fast float %1535, %1510
  %1560 = fadd fast float %1558, %1559
  %1561 = call float @dx.op.unary.f32(i32 7, float %1560)  ; Saturate(value)
  %1562 = call float @dx.op.unary.f32(i32 24, float %1561)  ; Sqrt(value)
  %1563 = fmul fast float %1562, %1544
  %1564 = fmul fast float %1509, 2.000000e+00
  %1565 = fmul fast float %1564, %1544
  %1566 = fmul fast float %1565, %1562
  %1567 = fmul fast float %1533, %818
  %1568 = fadd fast float %1567, %1509
  %1569 = fadd fast float %1568, %1547
  %1570 = fmul fast float %1533, %1510
  %1571 = fadd fast float %1570, 1.000000e+00
  %1572 = fadd fast float %1571, %1553
  %1573 = fmul fast float %1563, %1572
  %1574 = fmul fast float %1569, %1572
  %1575 = fmul fast float %1566, %1569
  %1576 = fmul fast float %1573, 5.000000e-01
  %1577 = fmul fast float %1569, 2.500000e-01
  %1578 = fmul fast float %1577, %1566
  %1579 = fsub fast float %1578, %1576
  %1580 = fmul fast float %1579, %1574
  %1581 = fmul fast float %1573, %1573
  %1582 = fmul fast float %1573, 2.000000e+00
  %1583 = fsub fast float %1575, %1582
  %1584 = fmul fast float %1583, %1575
  %1585 = fadd fast float %1584, %1581
  %1586 = fmul fast float %1572, %1572
  %1587 = fmul fast float %1586, %1568
  %1588 = fadd fast float %1572, %1570
  %1589 = fmul fast float %1588, 5.000000e-01
  %1590 = fsub fast float -5.000000e-01, %1589
  %1591 = fmul fast float %1590, %1574
  %1592 = fadd fast float %1591, %1587
  %1593 = fmul fast float %1592, %1569
  %1594 = fadd fast float %1585, %1593
  %1595 = fmul fast float %1580, 2.000000e+00
  %1596 = fmul fast float %1594, %1594
  %1597 = fmul fast float %1580, %1580
  %1598 = fadd fast float %1596, %1597
  %1599 = fdiv fast float %1595, %1598
  %1600 = fmul fast float %1594, %1599
  %1601 = fmul fast float %1580, %1599
  %1602 = fsub fast float 1.000000e+00, %1601
  %1603 = fmul fast float %1602, %1547
  %1604 = fmul fast float %1600, %1563
  %1605 = fmul fast float %1602, %1553
  %1606 = fmul fast float %1600, %1566
  %1607 = fadd fast float %1604, %1567
  %1608 = fadd fast float %1607, %1603
  %1609 = fadd fast float %1606, %1570
  %1610 = fadd fast float %1609, %1605
  %1611 = fmul fast float %1610, 2.000000e+00
  %1612 = fadd fast float %1611, 2.000000e+00
  %1613 = call float @dx.op.unary.f32(i32 25, float %1612)  ; Rsqrt(value)
  %1614 = fadd fast float %1608, %1509
  %1615 = fmul fast float %1614, %1613
  %1616 = call float @dx.op.unary.f32(i32 7, float %1615)  ; Saturate(value)
  %1617 = fmul fast float %1610, %1613
  %1618 = fadd fast float %1617, %1613
  %1619 = call float @dx.op.unary.f32(i32 7, float %1618)  ; Saturate(value)
  br label %1620

; <label>:1620                                    ; preds = %1540, %1538, %1507
  %1621 = phi float [ %1539, %1538 ], [ %1619, %1540 ], [ %1519, %1507 ]
  %1622 = phi float [ 1.000000e+00, %1538 ], [ %1616, %1540 ], [ %1516, %1507 ]
  %1623 = phi float [ %818, %1538 ], [ %1608, %1540 ], [ %818, %1507 ]
  %1624 = call float @dx.op.unary.f32(i32 6, float %1509)  ; FAbs(value)
  %1625 = fadd fast float %1624, 0x3EE4F8B580000000
  %1626 = call float @dx.op.unary.f32(i32 7, float %1625)  ; Saturate(value)
  %1627 = fsub fast float 1.000000e+00, %1621
  %1628 = fmul fast float %1627, %1627
  %1629 = fmul fast float %1628, %1628
  %1630 = fmul fast float %1629, %1627
  %1631 = fsub fast float 1.000000e+00, %1630
  %1632 = fmul fast float %1631, 0x3FA47AE140000000
  %1633 = fadd fast float %1632, %1630
  %1634 = fmul fast float %1522, %1522
  %1635 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %1635, label %1636, label %1643

; <label>:1636                                    ; preds = %1620
  %1637 = fmul fast float %845, %845
  %1638 = fmul fast float %1621, 0x400CCCCCC0000000
  %1639 = fadd fast float %1638, 0x3FD99999A0000000
  %1640 = fdiv fast float %1637, %1639
  %1641 = fadd fast float %1640, %1634
  %1642 = call float @dx.op.unary.f32(i32 7, float %1641)  ; Saturate(value)
  br label %1643

; <label>:1643                                    ; preds = %1636, %1620
  %1644 = phi float [ %1642, %1636 ], [ %1634, %1620 ]
  br i1 %1529, label %1645, label %1658

; <label>:1645                                    ; preds = %1643
  %1646 = fmul fast float %1528, 2.500000e-01
  %1647 = bitcast float %1644 to i32
  %1648 = ashr i32 %1647, 1
  %1649 = add nsw i32 %1648, 532487669
  %1650 = bitcast i32 %1649 to float
  %1651 = fmul fast float %1650, 3.000000e+00
  %1652 = fadd fast float %1651, %1528
  %1653 = fmul fast float %1646, %1652
  %1654 = fadd fast float %1621, 0x3F50624DE0000000
  %1655 = fdiv fast float %1653, %1654
  %1656 = fadd fast float %1655, %1644
  %1657 = fdiv fast float %1644, %1656
  br label %1658

; <label>:1658                                    ; preds = %1645, %1643
  %1659 = phi float [ %1657, %1645 ], [ 1.000000e+00, %1643 ]
  %1660 = call float @dx.op.unary.f32(i32 24, float %1644)  ; Sqrt(value)
  %1661 = fsub fast float 1.000000e+00, %1660
  %1662 = fmul fast float %1661, %1626
  %1663 = fadd fast float %1662, %1660
  %1664 = fmul fast float %1663, %837
  %1665 = fmul fast float %1661, %837
  %1666 = fadd fast float %1665, %1660
  %1667 = fmul fast float %1666, %1626
  %1668 = fadd fast float %1664, %1667
  %1669 = fdiv fast float 5.000000e-01, %1668
  %1670 = fmul fast float %1644, %1622
  %1671 = fsub fast float %1670, %1622
  %1672 = fmul fast float %1671, %1622
  %1673 = fadd fast float %1672, 1.000000e+00
  %1674 = fmul fast float %1673, %1673
  %1675 = fmul fast float %1674, 0x400921FB60000000
  %1676 = fdiv fast float %1644, %1675
  %1677 = fmul fast float %1633, %837
  %1678 = fmul fast float %1677, %1659
  %1679 = fmul fast float %1678, %1669
  %1680 = fmul fast float %1679, %1676
  %1681 = fmul fast float %1680, %107
  %1682 = fsub fast float 1.000000e+00, %1633
  %1683 = fmul fast float %1682, %1682
  %1684 = fmul fast float %1621, 0x3FCC28F5C0000000
  %1685 = fsub fast float 0x3FE428F5C0000000, %1684
  %1686 = fmul fast float %1685, %1621
  %1687 = fadd fast float %1686, 0xBFE7D70A40000000
  %1688 = fmul fast float %1687, %1622
  %1689 = fmul fast float %1626, 0x3FE5555560000000
  %1690 = fsub fast float %1689, %1688
  %1691 = call float @dx.op.binary.f32(i32 35, float %1690, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1692 = call float @dx.op.binary.f32(i32 36, float %1691, float 1.000000e+00)  ; FMin(a,b)
  %1693 = fmul fast float %1621, 0x3FE5555560000000
  %1694 = fsub fast float %1693, %1687
  %1695 = call float @dx.op.unary.f32(i32 7, float %1694)  ; Saturate(value)
  %1696 = fcmp fast ogt float %128, 0.000000e+00
  br i1 %1696, label %1697, label %1734

; <label>:1697                                    ; preds = %1658
  %1698 = fmul fast float %1623, 0x3FE5555560000000
  %1699 = fsub fast float %1698, %1688
  %1700 = call float @dx.op.binary.f32(i32 35, float %1699, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1701 = call float @dx.op.binary.f32(i32 36, float %1700, float 1.000000e+00)  ; FMin(a,b)
  %1702 = fdiv fast float 1.000000e+00, %1692
  %1703 = fdiv fast float 1.000000e+00, %1701
  %1704 = fmul fast float %167, 0x3FD45F3060000000
  %1705 = fmul fast float %168, 0x3FD45F3060000000
  %1706 = fmul fast float %169, 0x3FD45F3060000000
  %1707 = call float @dx.op.binary.f32(i32 35, float %1704, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1708 = call float @dx.op.binary.f32(i32 35, float %1705, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1709 = call float @dx.op.binary.f32(i32 35, float %1706, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1710 = call float @dx.op.unary.f32(i32 23, float %1707)  ; Log(value)
  %1711 = call float @dx.op.unary.f32(i32 23, float %1708)  ; Log(value)
  %1712 = call float @dx.op.unary.f32(i32 23, float %1709)  ; Log(value)
  %1713 = fadd fast float %1702, -2.000000e+00
  %1714 = fadd fast float %1713, %1703
  %1715 = call float @dx.op.binary.f32(i32 35, float %1714, float 0.000000e+00)  ; FMax(a,b)
  %1716 = fmul fast float %1710, 5.000000e-01
  %1717 = fmul fast float %1716, %1715
  %1718 = fmul fast float %1711, 5.000000e-01
  %1719 = fmul fast float %1718, %1715
  %1720 = fmul fast float %1712, 5.000000e-01
  %1721 = fmul fast float %1720, %1715
  %1722 = call float @dx.op.unary.f32(i32 21, float %1717)  ; Exp(value)
  %1723 = call float @dx.op.unary.f32(i32 21, float %1719)  ; Exp(value)
  %1724 = call float @dx.op.unary.f32(i32 21, float %1721)  ; Exp(value)
  %1725 = fadd fast float %1722, -1.000000e+00
  %1726 = fadd fast float %1723, -1.000000e+00
  %1727 = fadd fast float %1724, -1.000000e+00
  %1728 = fmul fast float %1725, %128
  %1729 = fmul fast float %1726, %128
  %1730 = fmul fast float %1727, %128
  %1731 = fadd fast float %1728, 1.000000e+00
  %1732 = fadd fast float %1729, 1.000000e+00
  %1733 = fadd fast float %1730, 1.000000e+00
  br label %1734

; <label>:1734                                    ; preds = %1697, %1658
  %1735 = phi float [ %1731, %1697 ], [ 1.000000e+00, %1658 ]
  %1736 = phi float [ %1732, %1697 ], [ 1.000000e+00, %1658 ]
  %1737 = phi float [ %1733, %1697 ], [ 1.000000e+00, %1658 ]
  %1738 = fmul fast float %185, 0x3FD45F3060000000
  %1739 = fmul fast float %186, 0x3FD45F3060000000
  %1740 = fmul fast float %187, 0x3FD45F3060000000
  %1741 = fmul fast float %1738, %837
  %1742 = fmul fast float %1739, %837
  %1743 = fmul fast float %1740, %837
  %1744 = fmul fast float %1683, %1741
  %1745 = fmul fast float %1744, %1735
  %1746 = fmul fast float %1683, %1742
  %1747 = fmul fast float %1746, %1736
  %1748 = fmul fast float %1683, %1743
  %1749 = fmul fast float %1748, %1737
  %1750 = fsub fast float %1745, %1741
  %1751 = fsub fast float %1747, %1742
  %1752 = fsub fast float %1749, %1743
  %1753 = fmul fast float %1750, %107
  %1754 = fmul fast float %1751, %107
  %1755 = fmul fast float %1752, %107
  %1756 = fadd fast float %1753, %1741
  %1757 = fadd fast float %1754, %1742
  %1758 = fadd fast float %1755, %1743
  %1759 = fmul fast float %1520, %1520
  %1760 = call float @dx.op.unary.f32(i32 24, float %1759)  ; Sqrt(value)
  %1761 = fsub fast float 1.000000e+00, %1760
  %1762 = fmul fast float %1761, %1692
  %1763 = fadd fast float %1762, %1760
  %1764 = fmul fast float %1763, %837
  %1765 = fmul fast float %1761, %837
  %1766 = fadd fast float %1765, %1760
  %1767 = fmul fast float %1766, %1692
  %1768 = fadd fast float %1764, %1767
  %1769 = fdiv fast float 5.000000e-01, %1768
  %1770 = fmul fast float %1622, %1759
  %1771 = fsub fast float %1770, %1622
  %1772 = fmul fast float %1771, %1622
  %1773 = fadd fast float %1772, 1.000000e+00
  %1774 = fmul fast float %1773, %1773
  %1775 = fmul fast float %1774, 0x400921FB60000000
  %1776 = fdiv fast float %1759, %1775
  %1777 = fsub fast float 1.000000e+00, %1695
  %1778 = fmul fast float %1777, %1777
  %1779 = fmul fast float %1778, %1778
  %1780 = fmul fast float %1779, %1777
  %1781 = fmul fast float %197, 5.000000e+01
  %1782 = call float @dx.op.unary.f32(i32 7, float %1781)  ; Saturate(value)
  %1783 = fmul fast float %1782, %1780
  %1784 = fsub fast float 1.000000e+00, %1780
  %1785 = fmul fast float %1784, %196
  %1786 = fmul fast float %1784, %197
  %1787 = fmul fast float %1784, %198
  %1788 = fadd fast float %1783, %1785
  %1789 = fadd fast float %1783, %1786
  %1790 = fadd fast float %1783, %1787
  %1791 = fmul fast float %1782, %1630
  %1792 = fmul fast float %1631, %196
  %1793 = fmul fast float %1631, %197
  %1794 = fmul fast float %1631, %198
  %1795 = fadd fast float %1791, %1792
  %1796 = fadd fast float %1791, %1793
  %1797 = fadd fast float %1791, %1794
  br i1 %1635, label %1798, label %1805

; <label>:1798                                    ; preds = %1734
  %1799 = fmul fast float %845, %845
  %1800 = fmul fast float %1621, 0x400CCCCCC0000000
  %1801 = fadd fast float %1800, 0x3FD99999A0000000
  %1802 = fdiv fast float %1799, %1801
  %1803 = fadd fast float %1802, %1759
  %1804 = call float @dx.op.unary.f32(i32 7, float %1803)  ; Saturate(value)
  br label %1805

; <label>:1805                                    ; preds = %1798, %1734
  %1806 = phi float [ %1804, %1798 ], [ %1759, %1734 ]
  %1807 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %1807, label %1808, label %1821

; <label>:1808                                    ; preds = %1805
  %1809 = fmul fast float %843, 2.500000e-01
  %1810 = bitcast float %1806 to i32
  %1811 = ashr i32 %1810, 1
  %1812 = add nsw i32 %1811, 532487669
  %1813 = bitcast i32 %1812 to float
  %1814 = fmul fast float %1813, 3.000000e+00
  %1815 = fadd fast float %1814, %843
  %1816 = fmul fast float %1809, %1815
  %1817 = fadd fast float %1621, 0x3F50624DE0000000
  %1818 = fdiv fast float %1816, %1817
  %1819 = fadd fast float %1818, %1806
  %1820 = fdiv fast float %1806, %1819
  br label %1821

; <label>:1821                                    ; preds = %1808, %1805
  %1822 = phi float [ %1820, %1808 ], [ 1.000000e+00, %1805 ]
  %1823 = fmul fast float %1769, %837
  %1824 = fmul fast float %1823, %1776
  %1825 = fmul fast float %1824, %1822
  %1826 = fmul fast float %1735, %1683
  %1827 = fmul fast float %1736, %1683
  %1828 = fmul fast float %1737, %1683
  %1829 = fmul fast float %1826, %1788
  %1830 = fmul fast float %1827, %1789
  %1831 = fmul fast float %1828, %1790
  %1832 = fsub fast float %1829, %1795
  %1833 = fsub fast float %1830, %1796
  %1834 = fsub fast float %1831, %1797
  %1835 = fmul fast float %1832, %107
  %1836 = fmul fast float %1833, %107
  %1837 = fmul fast float %1834, %107
  %1838 = fadd fast float %1835, %1795
  %1839 = fadd fast float %1836, %1796
  %1840 = fadd fast float %1837, %1797
  %1841 = fmul fast float %1825, %1838
  %1842 = fmul fast float %1825, %1839
  %1843 = fmul fast float %1825, %1840
  %1844 = fadd fast float %1841, %1681
  %1845 = fadd fast float %1842, %1681
  %1846 = fadd fast float %1843, %1681
  br label %3023

; <label>:1847                                    ; preds = %835
  %1848 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1849 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %1850 = fmul fast float %1849, 2.000000e+00
  %1851 = fadd fast float %1850, 2.000000e+00
  %1852 = call float @dx.op.unary.f32(i32 25, float %1851)  ; Rsqrt(value)
  %1853 = fadd fast float %1848, %818
  %1854 = fmul fast float %1852, %1853
  %1855 = call float @dx.op.unary.f32(i32 7, float %1854)  ; Saturate(value)
  %1856 = fmul fast float %1852, %1849
  %1857 = fadd fast float %1856, %1852
  %1858 = call float @dx.op.unary.f32(i32 7, float %1857)  ; Saturate(value)
  %1859 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %1859, label %1860, label %1949

; <label>:1860                                    ; preds = %1847
  %1861 = fmul fast float %843, %843
  %1862 = fsub fast float 1.000000e+00, %1861
  %1863 = call float @dx.op.unary.f32(i32 24, float %1862)  ; Sqrt(value)
  %1864 = fmul fast float %818, 2.000000e+00
  %1865 = fmul fast float %1864, %1848
  %1866 = fsub fast float %1865, %1849
  %1867 = fcmp fast ult float %1866, %1863
  br i1 %1867, label %1870, label %1868

; <label>:1868                                    ; preds = %1860
  %1869 = call float @dx.op.unary.f32(i32 6, float %1848)  ; FAbs(value)
  br label %1949

; <label>:1870                                    ; preds = %1860
  %1871 = fmul fast float %1866, %1866
  %1872 = fsub fast float 1.000000e+00, %1871
  %1873 = call float @dx.op.unary.f32(i32 25, float %1872)  ; Rsqrt(value)
  %1874 = fmul fast float %1873, %843
  %1875 = fmul fast float %1866, %818
  %1876 = fsub fast float %1848, %1875
  %1877 = fmul fast float %1874, %1876
  %1878 = fmul fast float %1848, %1848
  %1879 = fmul fast float %1878, 2.000000e+00
  %1880 = fadd fast float %1879, -1.000000e+00
  %1881 = fmul fast float %1866, %1849
  %1882 = fsub fast float %1880, %1881
  %1883 = fmul fast float %1874, %1882
  %1884 = fmul fast float %818, %818
  %1885 = fsub fast float 1.000000e+00, %1884
  %1886 = fsub fast float %1885, %1878
  %1887 = fmul fast float %1849, %1849
  %1888 = fsub fast float %1886, %1887
  %1889 = fmul fast float %1865, %1849
  %1890 = fadd fast float %1888, %1889
  %1891 = call float @dx.op.unary.f32(i32 7, float %1890)  ; Saturate(value)
  %1892 = call float @dx.op.unary.f32(i32 24, float %1891)  ; Sqrt(value)
  %1893 = fmul fast float %1892, %1874
  %1894 = fmul fast float %1848, 2.000000e+00
  %1895 = fmul fast float %1894, %1874
  %1896 = fmul fast float %1895, %1892
  %1897 = fmul fast float %1863, %818
  %1898 = fadd fast float %1897, %1848
  %1899 = fadd fast float %1898, %1877
  %1900 = fmul fast float %1863, %1849
  %1901 = fadd fast float %1900, 1.000000e+00
  %1902 = fadd fast float %1901, %1883
  %1903 = fmul fast float %1893, %1902
  %1904 = fmul fast float %1899, %1902
  %1905 = fmul fast float %1896, %1899
  %1906 = fmul fast float %1903, 5.000000e-01
  %1907 = fmul fast float %1899, 2.500000e-01
  %1908 = fmul fast float %1907, %1896
  %1909 = fsub fast float %1908, %1906
  %1910 = fmul fast float %1909, %1904
  %1911 = fmul fast float %1903, %1903
  %1912 = fmul fast float %1903, 2.000000e+00
  %1913 = fsub fast float %1905, %1912
  %1914 = fmul fast float %1913, %1905
  %1915 = fadd fast float %1914, %1911
  %1916 = fmul fast float %1902, %1902
  %1917 = fmul fast float %1916, %1898
  %1918 = fadd fast float %1902, %1900
  %1919 = fmul fast float %1918, 5.000000e-01
  %1920 = fsub fast float -5.000000e-01, %1919
  %1921 = fmul fast float %1920, %1904
  %1922 = fadd fast float %1921, %1917
  %1923 = fmul fast float %1922, %1899
  %1924 = fadd fast float %1915, %1923
  %1925 = fmul fast float %1910, 2.000000e+00
  %1926 = fmul fast float %1924, %1924
  %1927 = fmul fast float %1910, %1910
  %1928 = fadd fast float %1926, %1927
  %1929 = fdiv fast float %1925, %1928
  %1930 = fmul fast float %1924, %1929
  %1931 = fmul fast float %1910, %1929
  %1932 = fsub fast float 1.000000e+00, %1931
  %1933 = fmul fast float %1932, %1877
  %1934 = fmul fast float %1930, %1893
  %1935 = fmul fast float %1932, %1883
  %1936 = fmul fast float %1930, %1896
  %1937 = fadd fast float %1936, %1900
  %1938 = fadd fast float %1937, %1935
  %1939 = fmul fast float %1938, 2.000000e+00
  %1940 = fadd fast float %1939, 2.000000e+00
  %1941 = call float @dx.op.unary.f32(i32 25, float %1940)  ; Rsqrt(value)
  %1942 = fadd fast float %1898, %1934
  %1943 = fadd fast float %1942, %1933
  %1944 = fmul fast float %1943, %1941
  %1945 = call float @dx.op.unary.f32(i32 7, float %1944)  ; Saturate(value)
  %1946 = fmul fast float %1938, %1941
  %1947 = fadd fast float %1946, %1941
  %1948 = call float @dx.op.unary.f32(i32 7, float %1947)  ; Saturate(value)
  br label %1949

; <label>:1949                                    ; preds = %1870, %1868, %1847
  %1950 = phi float [ %1869, %1868 ], [ %1948, %1870 ], [ %1858, %1847 ]
  %1951 = phi float [ 1.000000e+00, %1868 ], [ %1945, %1870 ], [ %1855, %1847 ]
  %1952 = call float @dx.op.unary.f32(i32 6, float %1848)  ; FAbs(value)
  %1953 = fadd fast float %1952, 0x3EE4F8B580000000
  %1954 = call float @dx.op.unary.f32(i32 7, float %1953)  ; Saturate(value)
  %1955 = fmul fast float %107, 2.550000e+02
  %1956 = fadd fast float %1955, 5.000000e-01
  %1957 = fptoui float %1956 to i32
  %1958 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1959 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1958, i32 0, i32 5, i32 %1957, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1960 = extractvalue %dx.types.ResRet.f32 %1959, 0
  %1961 = extractvalue %dx.types.ResRet.f32 %1959, 1
  %1962 = extractvalue %dx.types.ResRet.f32 %1959, 2
  %1963 = fadd fast float %110, 0xBFB99999A0000000
  %1964 = fmul fast float %1963, 1.000000e+01
  %1965 = call float @dx.op.unary.f32(i32 7, float %1964)  ; Saturate(value)
  %1966 = fmul fast float %1960, 2.000000e+00
  %1967 = fadd fast float %1966, -1.000000e+00
  %1968 = fmul fast float %1967, %1965
  %1969 = fadd fast float %1968, 1.000000e+00
  %1970 = fmul fast float %1961, 2.000000e+00
  %1971 = fadd fast float %1970, -1.000000e+00
  %1972 = fmul fast float %1971, %1965
  %1973 = fadd fast float %1972, 1.000000e+00
  %1974 = fmul fast float %1969, %813
  %1975 = call float @dx.op.unary.f32(i32 7, float %1974)  ; Saturate(value)
  %1976 = call float @dx.op.binary.f32(i32 35, float %1975, float 0x3F947AE140000000)  ; FMax(a,b)
  %1977 = fmul fast float %1973, %813
  %1978 = call float @dx.op.unary.f32(i32 7, float %1977)  ; Saturate(value)
  %1979 = fsub fast float %1978, %1976
  %1980 = fmul fast float %1979, %1962
  %1981 = fadd fast float %1980, %1976
  %1982 = fmul fast float %813, 2.000000e+00
  %1983 = fmul fast float %1950, %1950
  %1984 = fmul fast float %1983, %1982
  %1985 = fadd fast float %1984, -5.000000e-01
  %1986 = fsub fast float 1.000000e+00, %1954
  %1987 = fmul fast float %1986, %1986
  %1988 = fmul fast float %1985, %1986
  %1989 = fmul fast float %1987, %1987
  %1990 = fmul fast float %1989, %1988
  %1991 = fadd fast float %1990, 1.000000e+00
  %1992 = fsub fast float 1.000000e+00, %837
  %1993 = fmul fast float %1992, %1992
  %1994 = fmul fast float %1993, %1993
  %1995 = fmul fast float %1994, %1992
  %1996 = fmul fast float %1995, %1985
  %1997 = fadd fast float %1996, 1.000000e+00
  %1998 = fmul fast float %1997, 0x3FD45F3060000000
  %1999 = fmul fast float %1998, %1991
  %2000 = fmul fast float %837, %185
  %2001 = fmul fast float %2000, %1999
  %2002 = fmul fast float %837, %186
  %2003 = fmul fast float %2002, %1999
  %2004 = fmul fast float %837, %187
  %2005 = fmul fast float %2004, %1999
  %2006 = fmul fast float %1981, %1981
  %2007 = fmul fast float %2006, %2006
  %2008 = fmul fast float %1976, %1976
  %2009 = fmul fast float %2008, %2008
  %2010 = fmul fast float %1978, %1978
  %2011 = fmul fast float %2010, %2010
  %2012 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %2012, label %2013, label %2020

; <label>:2013                                    ; preds = %1949
  %2014 = fmul fast float %845, %845
  %2015 = fmul fast float %1950, 0x400CCCCCC0000000
  %2016 = fadd fast float %2015, 0x3FD99999A0000000
  %2017 = fdiv fast float %2014, %2016
  %2018 = fadd fast float %2017, %2009
  %2019 = call float @dx.op.unary.f32(i32 7, float %2018)  ; Saturate(value)
  br label %2020

; <label>:2020                                    ; preds = %2013, %1949
  %2021 = phi float [ %2019, %2013 ], [ %2009, %1949 ]
  br i1 %1859, label %2022, label %2035

; <label>:2022                                    ; preds = %2020
  %2023 = fmul fast float %843, 2.500000e-01
  %2024 = bitcast float %2021 to i32
  %2025 = ashr i32 %2024, 1
  %2026 = add nsw i32 %2025, 532487669
  %2027 = bitcast i32 %2026 to float
  %2028 = fmul fast float %2027, 3.000000e+00
  %2029 = fadd fast float %2028, %843
  %2030 = fmul fast float %2023, %2029
  %2031 = fadd fast float %1950, 0x3F50624DE0000000
  %2032 = fdiv fast float %2030, %2031
  %2033 = fadd fast float %2032, %2021
  %2034 = fdiv fast float %2021, %2033
  br label %2035

; <label>:2035                                    ; preds = %2022, %2020
  %2036 = phi float [ %2034, %2022 ], [ 1.000000e+00, %2020 ]
  br i1 %2012, label %2037, label %2044

; <label>:2037                                    ; preds = %2035
  %2038 = fmul fast float %845, %845
  %2039 = fmul fast float %1950, 0x400CCCCCC0000000
  %2040 = fadd fast float %2039, 0x3FD99999A0000000
  %2041 = fdiv fast float %2038, %2040
  %2042 = fadd fast float %2041, %2011
  %2043 = call float @dx.op.unary.f32(i32 7, float %2042)  ; Saturate(value)
  br label %2044

; <label>:2044                                    ; preds = %2037, %2035
  %2045 = phi float [ %2043, %2037 ], [ %2011, %2035 ]
  br i1 %1859, label %2046, label %2059

; <label>:2046                                    ; preds = %2044
  %2047 = fmul fast float %843, 2.500000e-01
  %2048 = bitcast float %2045 to i32
  %2049 = ashr i32 %2048, 1
  %2050 = add nsw i32 %2049, 532487669
  %2051 = bitcast i32 %2050 to float
  %2052 = fmul fast float %2051, 3.000000e+00
  %2053 = fadd fast float %2052, %843
  %2054 = fmul fast float %2047, %2053
  %2055 = fadd fast float %1950, 0x3F50624DE0000000
  %2056 = fdiv fast float %2054, %2055
  %2057 = fadd fast float %2056, %2045
  %2058 = fdiv fast float %2045, %2057
  br label %2059

; <label>:2059                                    ; preds = %2046, %2044
  %2060 = phi float [ %2058, %2046 ], [ 1.000000e+00, %2044 ]
  %2061 = fmul fast float %2045, %1951
  %2062 = fsub fast float %2061, %1951
  %2063 = fmul fast float %2062, %1951
  %2064 = fadd fast float %2063, 1.000000e+00
  %2065 = fmul fast float %2064, %2064
  %2066 = fmul fast float %2065, 0x400921FB60000000
  %2067 = fdiv fast float %2045, %2066
  %2068 = fmul fast float %2067, %2060
  %2069 = fmul fast float %2021, %1951
  %2070 = fsub fast float %2069, %1951
  %2071 = fmul fast float %2070, %1951
  %2072 = fadd fast float %2071, 1.000000e+00
  %2073 = fmul fast float %2072, %2072
  %2074 = fmul fast float %2073, 0x400921FB60000000
  %2075 = fdiv fast float %2021, %2074
  %2076 = fmul fast float %2075, %2036
  %2077 = fsub fast float %2068, %2076
  %2078 = fmul fast float %2077, %1962
  %2079 = fadd fast float %2078, %2076
  %2080 = call float @dx.op.unary.f32(i32 24, float %2007)  ; Sqrt(value)
  %2081 = fsub fast float 1.000000e+00, %2080
  %2082 = fmul fast float %2081, %1954
  %2083 = fadd fast float %2082, %2080
  %2084 = fmul fast float %2083, %837
  %2085 = fmul fast float %2081, %837
  %2086 = fadd fast float %2085, %2080
  %2087 = fmul fast float %2086, %1954
  %2088 = fadd fast float %2084, %2087
  %2089 = fdiv fast float 5.000000e-01, %2088
  %2090 = fsub fast float 1.000000e+00, %1950
  %2091 = fmul fast float %2090, %2090
  %2092 = fmul fast float %2091, %2091
  %2093 = fmul fast float %2092, %2090
  %2094 = fmul fast float %197, 5.000000e+01
  %2095 = call float @dx.op.unary.f32(i32 7, float %2094)  ; Saturate(value)
  %2096 = fmul fast float %2095, %2093
  %2097 = fsub fast float 1.000000e+00, %2093
  %2098 = fmul fast float %2097, %196
  %2099 = fmul fast float %2097, %197
  %2100 = fmul fast float %2097, %198
  %2101 = fadd fast float %2096, %2098
  %2102 = fadd fast float %2096, %2099
  %2103 = fadd fast float %2096, %2100
  %2104 = fmul fast float %2079, %2089
  %2105 = fmul fast float %2101, %837
  %2106 = fmul fast float %2105, %2104
  %2107 = fmul fast float %2102, %837
  %2108 = fmul fast float %2107, %2104
  %2109 = fmul fast float %2103, %837
  %2110 = fmul fast float %2109, %2104
  %2111 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1958, i32 0, i32 3, i32 %1957, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2112 = extractvalue %dx.types.ResRet.f32 %2111, 2
  %2113 = extractvalue %dx.types.ResRet.f32 %2111, 3
  %2114 = fmul fast float %2112, 2.000000e+00
  %2115 = fadd fast float %2114, -1.000000e+00
  %2116 = fsub fast float 1.000000e+00, %497
  %2117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 248)  ; CBufferLoadLegacy(handle,regIndex)
  %2118 = extractvalue %dx.types.CBufRet.f32 %2117, 0
  %2119 = extractvalue %dx.types.CBufRet.f32 %2117, 1
  %2120 = fmul fast float %2116, 3.100000e+01
  %2121 = fadd fast float %2120, 3.450000e+01
  %2122 = uitofp i32 %1957 to float
  %2123 = fadd fast float %2122, 5.000000e-01
  %2124 = fdiv fast float %2121, %2118
  %2125 = fdiv fast float %2123, %2119
  %2126 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2127 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1958, %dx.types.Handle %2126, float %2124, float %2125, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2128 = extractvalue %dx.types.ResRet.f32 %2127, 0
  %2129 = extractvalue %dx.types.ResRet.f32 %2127, 1
  %2130 = extractvalue %dx.types.ResRet.f32 %2127, 2
  %2131 = fsub fast float -0.000000e+00, %124
  %2132 = fsub fast float -0.000000e+00, %125
  %2133 = fsub fast float -0.000000e+00, %126
  %2134 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %2131, float %2132, float %2133)  ; Dot3(ax,ay,az,bx,by,bz)
  %2135 = fmul fast float %2113, %2113
  %2136 = fmul fast float %2134, %2134
  %2137 = fsub fast float 1.000000e+00, %2136
  %2138 = fmul fast float %2135, %2137
  %2139 = fsub fast float 1.000000e+00, %2138
  %2140 = fcmp fast oge float %2139, 0.000000e+00
  %2141 = fmul fast float %2113, %463
  %2142 = fmul fast float %2113, %464
  %2143 = fmul fast float %2113, %465
  %2144 = call float @dx.op.unary.f32(i32 24, float %2139)  ; Sqrt(value)
  %2145 = fmul fast float %2134, %2113
  %2146 = fadd fast float %2145, %2144
  %2147 = fmul fast float %2146, %2131
  %2148 = fmul fast float %2146, %2132
  %2149 = fmul fast float %2146, %2133
  %2150 = fsub fast float %2141, %2147
  %2151 = fsub fast float %2142, %2148
  %2152 = fsub fast float %2143, %2149
  %2153 = select i1 %2140, float %2150, float 0.000000e+00
  %2154 = select i1 %2140, float %2151, float 0.000000e+00
  %2155 = select i1 %2140, float %2152, float 0.000000e+00
  %2156 = fsub fast float -0.000000e+00, %815
  %2157 = fsub fast float -0.000000e+00, %816
  %2158 = fsub fast float -0.000000e+00, %817
  %2159 = call float @dx.op.dot3.f32(i32 55, float %2156, float %2157, float %2158, float %2153, float %2154, float %2155)  ; Dot3(ax,ay,az,bx,by,bz)
  %2160 = fmul fast float %2115, %2115
  %2161 = fmul fast float %2159, %2115
  %2162 = fsub fast float 1.000000e+00, %2161
  %2163 = fmul fast float %2162, %2162
  %2164 = fsub fast float 1.000000e+00, %2160
  %2165 = fmul fast float %2164, 5.000000e-01
  %2166 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %2163)  ; FMax(a,b)
  %2167 = fdiv fast float %2165, %2166
  %2168 = fmul fast float %2167, %2128
  %2169 = fmul fast float %2167, %2129
  %2170 = fmul fast float %2167, %2130
  br label %3023

; <label>:2171                                    ; preds = %835
  %2172 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2173 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2174 = fmul fast float %2173, 2.000000e+00
  %2175 = fadd fast float %2174, 2.000000e+00
  %2176 = call float @dx.op.unary.f32(i32 25, float %2175)  ; Rsqrt(value)
  %2177 = fadd fast float %2172, %818
  %2178 = fmul fast float %2176, %2177
  %2179 = call float @dx.op.unary.f32(i32 7, float %2178)  ; Saturate(value)
  %2180 = fmul fast float %2176, %2173
  %2181 = fadd fast float %2180, %2176
  %2182 = call float @dx.op.unary.f32(i32 7, float %2181)  ; Saturate(value)
  %2183 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %2183, label %2184, label %2273

; <label>:2184                                    ; preds = %2171
  %2185 = fmul fast float %843, %843
  %2186 = fsub fast float 1.000000e+00, %2185
  %2187 = call float @dx.op.unary.f32(i32 24, float %2186)  ; Sqrt(value)
  %2188 = fmul fast float %818, 2.000000e+00
  %2189 = fmul fast float %2188, %2172
  %2190 = fsub fast float %2189, %2173
  %2191 = fcmp fast ult float %2190, %2187
  br i1 %2191, label %2194, label %2192

; <label>:2192                                    ; preds = %2184
  %2193 = call float @dx.op.unary.f32(i32 6, float %2172)  ; FAbs(value)
  br label %2273

; <label>:2194                                    ; preds = %2184
  %2195 = fmul fast float %2190, %2190
  %2196 = fsub fast float 1.000000e+00, %2195
  %2197 = call float @dx.op.unary.f32(i32 25, float %2196)  ; Rsqrt(value)
  %2198 = fmul fast float %2197, %843
  %2199 = fmul fast float %2190, %818
  %2200 = fsub fast float %2172, %2199
  %2201 = fmul fast float %2198, %2200
  %2202 = fmul fast float %2172, %2172
  %2203 = fmul fast float %2202, 2.000000e+00
  %2204 = fadd fast float %2203, -1.000000e+00
  %2205 = fmul fast float %2190, %2173
  %2206 = fsub fast float %2204, %2205
  %2207 = fmul fast float %2198, %2206
  %2208 = fmul fast float %818, %818
  %2209 = fsub fast float 1.000000e+00, %2208
  %2210 = fsub fast float %2209, %2202
  %2211 = fmul fast float %2173, %2173
  %2212 = fsub fast float %2210, %2211
  %2213 = fmul fast float %2189, %2173
  %2214 = fadd fast float %2212, %2213
  %2215 = call float @dx.op.unary.f32(i32 7, float %2214)  ; Saturate(value)
  %2216 = call float @dx.op.unary.f32(i32 24, float %2215)  ; Sqrt(value)
  %2217 = fmul fast float %2216, %2198
  %2218 = fmul fast float %2172, 2.000000e+00
  %2219 = fmul fast float %2218, %2198
  %2220 = fmul fast float %2219, %2216
  %2221 = fmul fast float %2187, %818
  %2222 = fadd fast float %2221, %2172
  %2223 = fadd fast float %2222, %2201
  %2224 = fmul fast float %2187, %2173
  %2225 = fadd fast float %2224, 1.000000e+00
  %2226 = fadd fast float %2225, %2207
  %2227 = fmul fast float %2217, %2226
  %2228 = fmul fast float %2223, %2226
  %2229 = fmul fast float %2220, %2223
  %2230 = fmul fast float %2227, 5.000000e-01
  %2231 = fmul fast float %2223, 2.500000e-01
  %2232 = fmul fast float %2231, %2220
  %2233 = fsub fast float %2232, %2230
  %2234 = fmul fast float %2233, %2228
  %2235 = fmul fast float %2227, %2227
  %2236 = fmul fast float %2227, 2.000000e+00
  %2237 = fsub fast float %2229, %2236
  %2238 = fmul fast float %2237, %2229
  %2239 = fadd fast float %2238, %2235
  %2240 = fmul fast float %2226, %2226
  %2241 = fmul fast float %2240, %2222
  %2242 = fadd fast float %2226, %2224
  %2243 = fmul fast float %2242, 5.000000e-01
  %2244 = fsub fast float -5.000000e-01, %2243
  %2245 = fmul fast float %2244, %2228
  %2246 = fadd fast float %2245, %2241
  %2247 = fmul fast float %2246, %2223
  %2248 = fadd fast float %2239, %2247
  %2249 = fmul fast float %2234, 2.000000e+00
  %2250 = fmul fast float %2248, %2248
  %2251 = fmul fast float %2234, %2234
  %2252 = fadd fast float %2250, %2251
  %2253 = fdiv fast float %2249, %2252
  %2254 = fmul fast float %2248, %2253
  %2255 = fmul fast float %2234, %2253
  %2256 = fsub fast float 1.000000e+00, %2255
  %2257 = fmul fast float %2256, %2201
  %2258 = fmul fast float %2254, %2217
  %2259 = fmul fast float %2256, %2207
  %2260 = fmul fast float %2254, %2220
  %2261 = fadd fast float %2260, %2224
  %2262 = fadd fast float %2261, %2259
  %2263 = fmul fast float %2262, 2.000000e+00
  %2264 = fadd fast float %2263, 2.000000e+00
  %2265 = call float @dx.op.unary.f32(i32 25, float %2264)  ; Rsqrt(value)
  %2266 = fadd fast float %2222, %2258
  %2267 = fadd fast float %2266, %2257
  %2268 = fmul fast float %2267, %2265
  %2269 = call float @dx.op.unary.f32(i32 7, float %2268)  ; Saturate(value)
  %2270 = fmul fast float %2262, %2265
  %2271 = fadd fast float %2270, %2265
  %2272 = call float @dx.op.unary.f32(i32 7, float %2271)  ; Saturate(value)
  br label %2273

; <label>:2273                                    ; preds = %2194, %2192, %2171
  %2274 = phi float [ %2193, %2192 ], [ %2272, %2194 ], [ %2182, %2171 ]
  %2275 = phi float [ 1.000000e+00, %2192 ], [ %2269, %2194 ], [ %2179, %2171 ]
  %2276 = call float @dx.op.unary.f32(i32 6, float %2172)  ; FAbs(value)
  %2277 = fadd fast float %2276, 0x3EE4F8B580000000
  %2278 = call float @dx.op.unary.f32(i32 7, float %2277)  ; Saturate(value)
  %2279 = fmul fast float %185, 0x3FD45F3060000000
  %2280 = fmul fast float %186, 0x3FD45F3060000000
  %2281 = fmul fast float %187, 0x3FD45F3060000000
  %2282 = fmul fast float %2279, %837
  %2283 = fmul fast float %2280, %837
  %2284 = fmul fast float %2281, %837
  %2285 = fmul fast float %813, %813
  %2286 = fmul fast float %2285, %2285
  %2287 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %2287, label %2288, label %2295

; <label>:2288                                    ; preds = %2273
  %2289 = fmul fast float %845, %845
  %2290 = fmul fast float %2274, 0x400CCCCCC0000000
  %2291 = fadd fast float %2290, 0x3FD99999A0000000
  %2292 = fdiv fast float %2289, %2291
  %2293 = fadd fast float %2292, %2286
  %2294 = call float @dx.op.unary.f32(i32 7, float %2293)  ; Saturate(value)
  br label %2295

; <label>:2295                                    ; preds = %2288, %2273
  %2296 = phi float [ %2294, %2288 ], [ %2286, %2273 ]
  br i1 %2183, label %2297, label %2310

; <label>:2297                                    ; preds = %2295
  %2298 = fmul fast float %843, 2.500000e-01
  %2299 = bitcast float %2296 to i32
  %2300 = ashr i32 %2299, 1
  %2301 = add nsw i32 %2300, 532487669
  %2302 = bitcast i32 %2301 to float
  %2303 = fmul fast float %2302, 3.000000e+00
  %2304 = fadd fast float %2303, %843
  %2305 = fmul fast float %2298, %2304
  %2306 = fadd fast float %2274, 0x3F50624DE0000000
  %2307 = fdiv fast float %2305, %2306
  %2308 = fadd fast float %2307, %2296
  %2309 = fdiv fast float %2296, %2308
  br label %2310

; <label>:2310                                    ; preds = %2297, %2295
  %2311 = phi float [ %2309, %2297 ], [ 1.000000e+00, %2295 ]
  %2312 = fmul fast float %2296, %2275
  %2313 = fsub fast float %2312, %2275
  %2314 = fmul fast float %2313, %2275
  %2315 = fadd fast float %2314, 1.000000e+00
  %2316 = fmul fast float %2315, %2315
  %2317 = fmul fast float %2316, 0x400921FB60000000
  %2318 = fdiv fast float %2296, %2317
  %2319 = fmul fast float %2318, %2311
  %2320 = call float @dx.op.unary.f32(i32 24, float %2296)  ; Sqrt(value)
  %2321 = fsub fast float 1.000000e+00, %2320
  %2322 = fmul fast float %2321, %2278
  %2323 = fadd fast float %2322, %2320
  %2324 = fmul fast float %2323, %837
  %2325 = fmul fast float %2321, %837
  %2326 = fadd fast float %2325, %2320
  %2327 = fmul fast float %2326, %2278
  %2328 = fadd fast float %2324, %2327
  %2329 = fdiv fast float 5.000000e-01, %2328
  %2330 = fsub fast float 1.000000e+00, %2274
  %2331 = fmul fast float %2330, %2330
  %2332 = fmul fast float %2331, %2331
  %2333 = fmul fast float %2332, %2330
  %2334 = fmul fast float %197, 5.000000e+01
  %2335 = call float @dx.op.unary.f32(i32 7, float %2334)  ; Saturate(value)
  %2336 = fmul fast float %2335, %2333
  %2337 = fsub fast float 1.000000e+00, %2333
  %2338 = fmul fast float %2337, %196
  %2339 = fmul fast float %2337, %197
  %2340 = fmul fast float %2337, %198
  %2341 = fadd fast float %2336, %2338
  %2342 = fadd fast float %2336, %2339
  %2343 = fadd fast float %2336, %2340
  %2344 = fmul fast float %2319, %2329
  %2345 = fmul fast float %2344, %837
  %2346 = fmul fast float %2345, %2341
  %2347 = fmul fast float %2345, %2342
  %2348 = fmul fast float %2345, %2343
  %2349 = fmul fast float %107, %107
  %2350 = fmul fast float %108, %108
  %2351 = fmul fast float %109, %109
  %2352 = fsub fast float 5.000000e-01, %818
  %2353 = fmul fast float %2352, 0x3FDC71C720000000
  %2354 = call float @dx.op.unary.f32(i32 7, float %2353)  ; Saturate(value)
  %2355 = fsub fast float -0.000000e+00, %2173
  %2356 = call float @dx.op.unary.f32(i32 7, float %2355)  ; Saturate(value)
  %2357 = fmul fast float %2356, %2356
  %2358 = fmul fast float %2357, 0x3FE47AE140000000
  %2359 = fsub fast float 1.000000e+00, %2358
  %2360 = fmul fast float %2357, 0x400015BFA0000000
  %2361 = fsub fast float 0x400921FB60000000, %2360
  %2362 = fmul fast float %2361, %2359
  %2363 = fdiv fast float 0x3FD70A3D80000000, %2362
  %2364 = fmul fast float %2363, %2354
  %2365 = fmul fast float %2349, %2364
  %2366 = fmul fast float %2350, %2364
  %2367 = fmul fast float %2351, %2364
  br label %3023

; <label>:2368                                    ; preds = %835
  %2369 = call float @dx.op.binary.f32(i32 35, float %813, float 0x3F70101020000000)  ; FMax(a,b)
  %2370 = call float @dx.op.binary.f32(i32 36, float %2369, float 1.000000e+00)  ; FMin(a,b)
  %2371 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2372 = call float @dx.op.binary.f32(i32 35, float %818, float -1.000000e+00)  ; FMax(a,b)
  %2373 = call float @dx.op.binary.f32(i32 36, float %2372, float 1.000000e+00)  ; FMin(a,b)
  %2374 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2375 = call float @dx.op.binary.f32(i32 35, float %2374, float -1.000000e+00)  ; FMax(a,b)
  %2376 = call float @dx.op.binary.f32(i32 36, float %2375, float 1.000000e+00)  ; FMin(a,b)
  %2377 = call float @dx.op.unary.f32(i32 6, float %2376)  ; FAbs(value)
  %2378 = fmul fast float %2377, 0x3FC40AE960000000
  %2379 = fsub fast float 0x3FF921FB60000000, %2378
  %2380 = fsub fast float 1.000000e+00, %2377
  %2381 = call float @dx.op.unary.f32(i32 24, float %2380)  ; Sqrt(value)
  %2382 = fmul fast float %2379, %2381
  %2383 = fcmp fast oge float %2376, 0.000000e+00
  %2384 = fsub fast float 0x400921FB60000000, %2382
  %2385 = select i1 %2383, float %2382, float %2384
  %2386 = call float @dx.op.unary.f32(i32 6, float %2373)  ; FAbs(value)
  %2387 = fmul fast float %2386, 0x3FC40AE960000000
  %2388 = fsub fast float 0x3FF921FB60000000, %2387
  %2389 = fsub fast float 1.000000e+00, %2386
  %2390 = call float @dx.op.unary.f32(i32 24, float %2389)  ; Sqrt(value)
  %2391 = fmul fast float %2388, %2390
  %2392 = fcmp fast oge float %2373, 0.000000e+00
  %2393 = fsub fast float 0x400921FB60000000, %2391
  %2394 = select i1 %2392, float %2391, float %2393
  %2395 = fsub fast float %2394, %2385
  %2396 = call float @dx.op.unary.f32(i32 6, float %2395)  ; FAbs(value)
  %2397 = fmul fast float %2396, 5.000000e-01
  %2398 = call float @dx.op.unary.f32(i32 12, float %2397)  ; Cos(value)
  %2399 = fmul fast float %2373, %124
  %2400 = fmul fast float %2373, %125
  %2401 = fmul fast float %2373, %126
  %2402 = fsub fast float %815, %2399
  %2403 = fsub fast float %816, %2400
  %2404 = fsub fast float %817, %2401
  %2405 = fmul fast float %2376, %124
  %2406 = fmul fast float %2376, %125
  %2407 = fmul fast float %2376, %126
  %2408 = fsub fast float %463, %2405
  %2409 = fsub fast float %464, %2406
  %2410 = fsub fast float %465, %2407
  %2411 = call float @dx.op.dot3.f32(i32 55, float %2402, float %2403, float %2404, float %2408, float %2409, float %2410)  ; Dot3(ax,ay,az,bx,by,bz)
  %2412 = call float @dx.op.dot3.f32(i32 55, float %2402, float %2403, float %2404, float %2402, float %2403, float %2404)  ; Dot3(ax,ay,az,bx,by,bz)
  %2413 = call float @dx.op.dot3.f32(i32 55, float %2408, float %2409, float %2410, float %2408, float %2409, float %2410)  ; Dot3(ax,ay,az,bx,by,bz)
  %2414 = fmul fast float %2413, %2412
  %2415 = fadd fast float %2414, 0x3F1A36E2E0000000
  %2416 = call float @dx.op.unary.f32(i32 25, float %2415)  ; Rsqrt(value)
  %2417 = fmul fast float %2416, %2411
  %2418 = fmul fast float %2417, 5.000000e-01
  %2419 = fadd fast float %2418, 5.000000e-01
  %2420 = call float @dx.op.unary.f32(i32 7, float %2419)  ; Saturate(value)
  %2421 = call float @dx.op.unary.f32(i32 24, float %2420)  ; Sqrt(value)
  %2422 = fdiv fast float 0x3FF30A3D80000000, %2398
  %2423 = fmul fast float %2398, 0x3FD70A3D80000000
  %2424 = fadd fast float %2422, %2423
  %2425 = fmul fast float %2370, %2370
  %2426 = fmul fast float %2425, 5.000000e-01
  %2427 = fmul fast float %2425, 2.000000e+00
  %2428 = fmul fast float %2421, 0x3FEFEBF020000000
  %2429 = fmul fast float %2376, %2376
  %2430 = fsub fast float 1.000000e+00, %2429
  %2431 = call float @dx.op.unary.f32(i32 24, float %2430)  ; Sqrt(value)
  %2432 = fmul fast float %2428, %2431
  %2433 = fmul fast float %2376, 0x3FB1E7C640000000
  %2434 = fsub fast float %2432, %2433
  %2435 = fmul fast float %2434, 0x3FC1E7C640000000
  %2436 = fadd fast float %2376, %2373
  %2437 = fadd fast float %2436, %2435
  %2438 = fmul fast float %2425, 0x3FF6A09E60000000
  %2439 = fmul fast float %2438, %2421
  %2440 = fmul fast float %2437, %2437
  %2441 = fmul fast float %2440, -5.000000e-01
  %2442 = fmul fast float %2439, %2439
  %2443 = fdiv fast float %2441, %2442
  %2444 = fmul fast float %2443, 0x3FF7154760000000
  %2445 = call float @dx.op.unary.f32(i32 21, float %2444)  ; Exp(value)
  %2446 = fmul fast float %2439, 0x40040D9320000000
  %2447 = fdiv fast float %2445, %2446
  %2448 = fmul fast float %2371, 5.000000e-01
  %2449 = fadd fast float %2448, 5.000000e-01
  %2450 = call float @dx.op.unary.f32(i32 7, float %2449)  ; Saturate(value)
  %2451 = call float @dx.op.unary.f32(i32 24, float %2450)  ; Sqrt(value)
  %2452 = fsub fast float 1.000000e+00, %2451
  %2453 = fmul fast float %2452, %2452
  %2454 = fmul fast float %2452, 0x3FEE82E740000000
  %2455 = fmul fast float %2453, %2453
  %2456 = fmul fast float %2455, %2454
  %2457 = fadd fast float %2456, 0x3FA7D18B20000000
  %2458 = fmul fast float %170, 5.000000e-01
  %2459 = fmul fast float %2458, %2421
  %2460 = fmul fast float %2459, %2447
  %2461 = fmul fast float %2460, %2457
  %2462 = fadd fast float %2373, 0xBFA1EB8520000000
  %2463 = fadd fast float %2462, %2376
  %2464 = fmul fast float %2463, %2463
  %2465 = fmul fast float %2464, -5.000000e-01
  %2466 = fmul fast float %2426, %2426
  %2467 = fdiv fast float %2465, %2466
  %2468 = fmul fast float %2467, 0x3FF7154760000000
  %2469 = call float @dx.op.unary.f32(i32 21, float %2468)  ; Exp(value)
  %2470 = fmul fast float %2425, 0x3FF40D9320000000
  %2471 = fdiv fast float %2469, %2470
  %2472 = fdiv fast float 1.000000e+00, %2424
  %2473 = fmul fast float %2417, 0x3FE99999A0000000
  %2474 = fsub fast float 0x3FE3333340000000, %2473
  %2475 = fmul fast float %2472, %2474
  %2476 = fadd fast float %2475, 1.000000e+00
  %2477 = fmul fast float %2476, %2421
  %2478 = fmul fast float %2477, %2477
  %2479 = fsub fast float 1.000000e+00, %2478
  %2480 = call float @dx.op.unary.f32(i32 7, float %2479)  ; Saturate(value)
  %2481 = call float @dx.op.unary.f32(i32 24, float %2480)  ; Sqrt(value)
  %2482 = fmul fast float %2481, %2398
  %2483 = fsub fast float 1.000000e+00, %2482
  %2484 = fmul fast float %2483, %2483
  %2485 = fmul fast float %2483, 0x3FEE82E740000000
  %2486 = fmul fast float %2484, %2484
  %2487 = fmul fast float %2486, %2485
  %2488 = fsub fast float 0x3FEE82E740000000, %2487
  %2489 = fmul fast float %2477, %2472
  %2490 = fmul fast float %2489, %2489
  %2491 = fsub fast float 1.000000e+00, %2490
  %2492 = call float @dx.op.unary.f32(i32 24, float %2491)  ; Sqrt(value)
  %2493 = fmul fast float %2492, 5.000000e-01
  %2494 = fdiv fast float %2493, %2398
  %2495 = call float @dx.op.unary.f32(i32 6, float %167)  ; FAbs(value)
  %2496 = call float @dx.op.unary.f32(i32 6, float %168)  ; FAbs(value)
  %2497 = call float @dx.op.unary.f32(i32 6, float %169)  ; FAbs(value)
  %2498 = call float @dx.op.unary.f32(i32 23, float %2495)  ; Log(value)
  %2499 = call float @dx.op.unary.f32(i32 23, float %2496)  ; Log(value)
  %2500 = call float @dx.op.unary.f32(i32 23, float %2497)  ; Log(value)
  %2501 = fmul fast float %2498, %2494
  %2502 = fmul fast float %2499, %2494
  %2503 = fmul fast float %2500, %2494
  %2504 = call float @dx.op.unary.f32(i32 21, float %2501)  ; Exp(value)
  %2505 = call float @dx.op.unary.f32(i32 21, float %2502)  ; Exp(value)
  %2506 = call float @dx.op.unary.f32(i32 21, float %2503)  ; Exp(value)
  %2507 = fmul fast float %2417, 0x40151037A0000000
  %2508 = fsub fast float 0xC016F7BB80000000, %2507
  %2509 = call float @dx.op.unary.f32(i32 21, float %2508)  ; Exp(value)
  %2510 = fmul fast float %2488, %2488
  %2511 = fmul fast float %2510, %2471
  %2512 = fmul fast float %2511, %2509
  %2513 = fmul fast float %2512, %2504
  %2514 = fmul fast float %2512, %2505
  %2515 = fmul fast float %2512, %2506
  %2516 = fadd fast float %2513, %2461
  %2517 = fadd fast float %2514, %2461
  %2518 = fadd fast float %2515, %2461
  %2519 = fadd fast float %2373, 0xBFC1EB8520000000
  %2520 = fadd fast float %2519, %2376
  %2521 = fmul fast float %2520, %2520
  %2522 = fmul fast float %2521, -5.000000e-01
  %2523 = fmul fast float %2427, %2427
  %2524 = fdiv fast float %2522, %2523
  %2525 = fmul fast float %2524, 0x3FF7154760000000
  %2526 = call float @dx.op.unary.f32(i32 21, float %2525)  ; Exp(value)
  %2527 = fmul fast float %2425, 0x40140D9320000000
  %2528 = fdiv fast float %2526, %2527
  %2529 = fmul fast float %2398, 5.000000e-01
  %2530 = fsub fast float 1.000000e+00, %2529
  %2531 = fmul fast float %2530, %2530
  %2532 = fmul fast float %2398, 0x3FDE82E740000000
  %2533 = fsub fast float 0x3FEE82E740000000, %2532
  %2534 = fmul fast float %2531, %2531
  %2535 = fmul fast float %2534, %2533
  %2536 = fadd fast float %2535, 0x3FA7D18B20000000
  %2537 = fsub fast float 0x3FEE82E740000000, %2535
  %2538 = fdiv fast float 0x3FE99999A0000000, %2398
  %2539 = fmul fast float %2498, %2538
  %2540 = fmul fast float %2499, %2538
  %2541 = fmul fast float %2500, %2538
  %2542 = call float @dx.op.unary.f32(i32 21, float %2539)  ; Exp(value)
  %2543 = call float @dx.op.unary.f32(i32 21, float %2540)  ; Exp(value)
  %2544 = call float @dx.op.unary.f32(i32 21, float %2541)  ; Exp(value)
  %2545 = fmul fast float %2417, 0x4038869BE0000000
  %2546 = fadd fast float %2545, 0xC038355B40000000
  %2547 = call float @dx.op.unary.f32(i32 21, float %2546)  ; Exp(value)
  %2548 = fmul fast float %2537, %2537
  %2549 = fmul fast float %2548, %2536
  %2550 = fmul fast float %2549, %2528
  %2551 = fmul fast float %2550, %2547
  %2552 = fmul fast float %2551, %2542
  %2553 = fmul fast float %2551, %2543
  %2554 = fmul fast float %2551, %2544
  %2555 = fadd fast float %2516, %2552
  %2556 = fadd fast float %2517, %2553
  %2557 = fadd fast float %2518, %2554
  %2558 = fmul fast float %2555, %807
  %2559 = fmul fast float %2556, %807
  %2560 = fmul fast float %2557, %807
  %2561 = call float @dx.op.unary.f32(i32 6, float %818)  ; FAbs(value)
  %2562 = fsub fast float 1.000000e+00, %2561
  %2563 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %124, float %125, float %126)  ; Dot3(ax,ay,az,bx,by,bz)
  %2564 = fmul fast float %2563, %124
  %2565 = fmul fast float %2563, %125
  %2566 = fmul fast float %2563, %126
  %2567 = fsub fast float %463, %2564
  %2568 = fsub fast float %464, %2565
  %2569 = fsub fast float %465, %2566
  %2570 = call float @dx.op.dot3.f32(i32 55, float %2567, float %2568, float %2569, float %2567, float %2568, float %2569)  ; Dot3(ax,ay,az,bx,by,bz)
  %2571 = call float @dx.op.unary.f32(i32 25, float %2570)  ; Rsqrt(value)
  %2572 = fmul fast float %2567, %2571
  %2573 = fmul fast float %2568, %2571
  %2574 = fmul fast float %2569, %2571
  %2575 = call float @dx.op.dot3.f32(i32 55, float %2572, float %2573, float %2574, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2576 = fadd fast float %2575, 1.000000e+00
  %2577 = fmul fast float %2576, 2.500000e-01
  %2578 = call float @dx.op.unary.f32(i32 7, float %2577)  ; Saturate(value)
  %2579 = fsub fast float %2562, %2578
  %2580 = fmul fast float %2579, 0x3FD51EB860000000
  %2581 = fadd fast float %2580, %2578
  %2582 = fmul fast float %128, 0x3FD45F3060000000
  %2583 = fmul fast float %2582, %2581
  %2584 = call float @dx.op.dot3.f32(i32 55, float %167, float %168, float %169, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2585 = fsub fast float 1.000000e+00, %806
  %2586 = call float @dx.op.binary.f32(i32 35, float %2584, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2587 = fdiv fast float %167, %2586
  %2588 = fdiv fast float %168, %2586
  %2589 = fdiv fast float %169, %2586
  %2590 = call float @dx.op.unary.f32(i32 6, float %2587)  ; FAbs(value)
  %2591 = call float @dx.op.unary.f32(i32 6, float %2588)  ; FAbs(value)
  %2592 = call float @dx.op.unary.f32(i32 6, float %2589)  ; FAbs(value)
  %2593 = call float @dx.op.unary.f32(i32 23, float %2590)  ; Log(value)
  %2594 = call float @dx.op.unary.f32(i32 23, float %2591)  ; Log(value)
  %2595 = call float @dx.op.unary.f32(i32 23, float %2592)  ; Log(value)
  %2596 = fmul fast float %2593, %2585
  %2597 = fmul fast float %2594, %2585
  %2598 = fmul fast float %2595, %2585
  %2599 = call float @dx.op.unary.f32(i32 21, float %2596)  ; Exp(value)
  %2600 = call float @dx.op.unary.f32(i32 21, float %2597)  ; Exp(value)
  %2601 = call float @dx.op.unary.f32(i32 21, float %2598)  ; Exp(value)
  %2602 = call float @dx.op.unary.f32(i32 24, float %2495)  ; Sqrt(value)
  %2603 = call float @dx.op.unary.f32(i32 24, float %2496)  ; Sqrt(value)
  %2604 = call float @dx.op.unary.f32(i32 24, float %2497)  ; Sqrt(value)
  %2605 = fmul fast float %2599, %2583
  %2606 = fmul fast float %2605, %2602
  %2607 = fmul fast float %2600, %2583
  %2608 = fmul fast float %2607, %2603
  %2609 = fmul fast float %2601, %2583
  %2610 = fmul fast float %2609, %2604
  %2611 = fadd fast float %2558, %2606
  %2612 = fadd fast float %2559, %2608
  %2613 = fadd fast float %2560, %2610
  %2614 = fsub fast float -0.000000e+00, %2611
  %2615 = fsub fast float -0.000000e+00, %2612
  %2616 = fsub fast float -0.000000e+00, %2613
  %2617 = call float @dx.op.binary.f32(i32 36, float %2614, float 0.000000e+00)  ; FMin(a,b)
  %2618 = call float @dx.op.binary.f32(i32 36, float %2615, float 0.000000e+00)  ; FMin(a,b)
  %2619 = call float @dx.op.binary.f32(i32 36, float %2616, float 0.000000e+00)  ; FMin(a,b)
  %2620 = fsub fast float -0.000000e+00, %2617
  %2621 = fsub fast float -0.000000e+00, %2618
  %2622 = fsub fast float -0.000000e+00, %2619
  br label %3023

; <label>:2623                                    ; preds = %835
  %2624 = fmul fast float %107, %107
  %2625 = fmul fast float %108, %108
  %2626 = fmul fast float %109, %109
  %2627 = call float @dx.op.unary.f32(i32 7, float %110)  ; Saturate(value)
  %2628 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2629 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2630 = fmul fast float %2629, 2.000000e+00
  %2631 = fadd fast float %2630, 2.000000e+00
  %2632 = call float @dx.op.unary.f32(i32 25, float %2631)  ; Rsqrt(value)
  %2633 = fadd fast float %2628, %818
  %2634 = fmul fast float %2632, %2633
  %2635 = call float @dx.op.unary.f32(i32 7, float %2634)  ; Saturate(value)
  %2636 = fmul fast float %2632, %2629
  %2637 = fadd fast float %2636, %2632
  %2638 = call float @dx.op.unary.f32(i32 7, float %2637)  ; Saturate(value)
  %2639 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %2639, label %2640, label %2729

; <label>:2640                                    ; preds = %2623
  %2641 = fmul fast float %843, %843
  %2642 = fsub fast float 1.000000e+00, %2641
  %2643 = call float @dx.op.unary.f32(i32 24, float %2642)  ; Sqrt(value)
  %2644 = fmul fast float %818, 2.000000e+00
  %2645 = fmul fast float %2644, %2628
  %2646 = fsub fast float %2645, %2629
  %2647 = fcmp fast ult float %2646, %2643
  br i1 %2647, label %2650, label %2648

; <label>:2648                                    ; preds = %2640
  %2649 = call float @dx.op.unary.f32(i32 6, float %2628)  ; FAbs(value)
  br label %2729

; <label>:2650                                    ; preds = %2640
  %2651 = fmul fast float %2646, %2646
  %2652 = fsub fast float 1.000000e+00, %2651
  %2653 = call float @dx.op.unary.f32(i32 25, float %2652)  ; Rsqrt(value)
  %2654 = fmul fast float %2653, %843
  %2655 = fmul fast float %2646, %818
  %2656 = fsub fast float %2628, %2655
  %2657 = fmul fast float %2654, %2656
  %2658 = fmul fast float %2628, %2628
  %2659 = fmul fast float %2658, 2.000000e+00
  %2660 = fadd fast float %2659, -1.000000e+00
  %2661 = fmul fast float %2646, %2629
  %2662 = fsub fast float %2660, %2661
  %2663 = fmul fast float %2654, %2662
  %2664 = fmul fast float %818, %818
  %2665 = fsub fast float 1.000000e+00, %2664
  %2666 = fsub fast float %2665, %2658
  %2667 = fmul fast float %2629, %2629
  %2668 = fsub fast float %2666, %2667
  %2669 = fmul fast float %2645, %2629
  %2670 = fadd fast float %2668, %2669
  %2671 = call float @dx.op.unary.f32(i32 7, float %2670)  ; Saturate(value)
  %2672 = call float @dx.op.unary.f32(i32 24, float %2671)  ; Sqrt(value)
  %2673 = fmul fast float %2672, %2654
  %2674 = fmul fast float %2628, 2.000000e+00
  %2675 = fmul fast float %2674, %2654
  %2676 = fmul fast float %2675, %2672
  %2677 = fmul fast float %2643, %818
  %2678 = fadd fast float %2677, %2628
  %2679 = fadd fast float %2678, %2657
  %2680 = fmul fast float %2643, %2629
  %2681 = fadd fast float %2680, 1.000000e+00
  %2682 = fadd fast float %2681, %2663
  %2683 = fmul fast float %2673, %2682
  %2684 = fmul fast float %2679, %2682
  %2685 = fmul fast float %2676, %2679
  %2686 = fmul fast float %2683, 5.000000e-01
  %2687 = fmul fast float %2679, 2.500000e-01
  %2688 = fmul fast float %2687, %2676
  %2689 = fsub fast float %2688, %2686
  %2690 = fmul fast float %2689, %2684
  %2691 = fmul fast float %2683, %2683
  %2692 = fmul fast float %2683, 2.000000e+00
  %2693 = fsub fast float %2685, %2692
  %2694 = fmul fast float %2693, %2685
  %2695 = fadd fast float %2694, %2691
  %2696 = fmul fast float %2682, %2682
  %2697 = fmul fast float %2696, %2678
  %2698 = fadd fast float %2682, %2680
  %2699 = fmul fast float %2698, 5.000000e-01
  %2700 = fsub fast float -5.000000e-01, %2699
  %2701 = fmul fast float %2700, %2684
  %2702 = fadd fast float %2701, %2697
  %2703 = fmul fast float %2702, %2679
  %2704 = fadd fast float %2695, %2703
  %2705 = fmul fast float %2690, 2.000000e+00
  %2706 = fmul fast float %2704, %2704
  %2707 = fmul fast float %2690, %2690
  %2708 = fadd fast float %2706, %2707
  %2709 = fdiv fast float %2705, %2708
  %2710 = fmul fast float %2704, %2709
  %2711 = fmul fast float %2690, %2709
  %2712 = fsub fast float 1.000000e+00, %2711
  %2713 = fmul fast float %2712, %2657
  %2714 = fmul fast float %2710, %2673
  %2715 = fmul fast float %2712, %2663
  %2716 = fmul fast float %2710, %2676
  %2717 = fadd fast float %2716, %2680
  %2718 = fadd fast float %2717, %2715
  %2719 = fmul fast float %2718, 2.000000e+00
  %2720 = fadd fast float %2719, 2.000000e+00
  %2721 = call float @dx.op.unary.f32(i32 25, float %2720)  ; Rsqrt(value)
  %2722 = fadd fast float %2678, %2714
  %2723 = fadd fast float %2722, %2713
  %2724 = fmul fast float %2723, %2721
  %2725 = call float @dx.op.unary.f32(i32 7, float %2724)  ; Saturate(value)
  %2726 = fmul fast float %2718, %2721
  %2727 = fadd fast float %2726, %2721
  %2728 = call float @dx.op.unary.f32(i32 7, float %2727)  ; Saturate(value)
  br label %2729

; <label>:2729                                    ; preds = %2650, %2648, %2623
  %2730 = phi float [ %2649, %2648 ], [ %2728, %2650 ], [ %2638, %2623 ]
  %2731 = phi float [ 1.000000e+00, %2648 ], [ %2725, %2650 ], [ %2635, %2623 ]
  %2732 = call float @dx.op.unary.f32(i32 6, float %2628)  ; FAbs(value)
  %2733 = fadd fast float %2732, 0x3EE4F8B580000000
  %2734 = call float @dx.op.unary.f32(i32 7, float %2733)  ; Saturate(value)
  %2735 = fmul fast float %813, %813
  %2736 = fmul fast float %2735, %2735
  %2737 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %2737, label %2738, label %2745

; <label>:2738                                    ; preds = %2729
  %2739 = fmul fast float %845, %845
  %2740 = fmul fast float %2730, 0x400CCCCCC0000000
  %2741 = fadd fast float %2740, 0x3FD99999A0000000
  %2742 = fdiv fast float %2739, %2741
  %2743 = fadd fast float %2742, %2736
  %2744 = call float @dx.op.unary.f32(i32 7, float %2743)  ; Saturate(value)
  br label %2745

; <label>:2745                                    ; preds = %2738, %2729
  %2746 = phi float [ %2744, %2738 ], [ %2736, %2729 ]
  br i1 %2639, label %2747, label %2760

; <label>:2747                                    ; preds = %2745
  %2748 = fmul fast float %843, 2.500000e-01
  %2749 = bitcast float %2746 to i32
  %2750 = ashr i32 %2749, 1
  %2751 = add nsw i32 %2750, 532487669
  %2752 = bitcast i32 %2751 to float
  %2753 = fmul fast float %2752, 3.000000e+00
  %2754 = fadd fast float %2753, %843
  %2755 = fmul fast float %2748, %2754
  %2756 = fadd fast float %2730, 0x3F50624DE0000000
  %2757 = fdiv fast float %2755, %2756
  %2758 = fadd fast float %2757, %2746
  %2759 = fdiv fast float %2746, %2758
  br label %2760

; <label>:2760                                    ; preds = %2747, %2745
  %2761 = phi float [ %2759, %2747 ], [ 1.000000e+00, %2745 ]
  %2762 = fmul fast float %2746, %2731
  %2763 = fsub fast float %2762, %2731
  %2764 = fmul fast float %2763, %2731
  %2765 = fadd fast float %2764, 1.000000e+00
  %2766 = fmul fast float %2765, %2765
  %2767 = fmul fast float %2766, 0x400921FB60000000
  %2768 = fdiv fast float %2746, %2767
  %2769 = fmul fast float %2768, %2761
  %2770 = call float @dx.op.unary.f32(i32 24, float %2746)  ; Sqrt(value)
  %2771 = fsub fast float 1.000000e+00, %2770
  %2772 = fmul fast float %2771, %2734
  %2773 = fadd fast float %2772, %2770
  %2774 = fmul fast float %2773, %837
  %2775 = fmul fast float %2771, %837
  %2776 = fadd fast float %2775, %2770
  %2777 = fmul fast float %2776, %2734
  %2778 = fadd fast float %2774, %2777
  %2779 = fdiv fast float 5.000000e-01, %2778
  %2780 = fsub fast float 1.000000e+00, %2730
  %2781 = fmul fast float %2780, %2780
  %2782 = fmul fast float %2781, %2781
  %2783 = fmul fast float %2782, %2780
  %2784 = fmul fast float %197, 5.000000e+01
  %2785 = call float @dx.op.unary.f32(i32 7, float %2784)  ; Saturate(value)
  %2786 = fmul fast float %2785, %2783
  %2787 = fsub fast float 1.000000e+00, %2783
  %2788 = fmul fast float %2787, %196
  %2789 = fmul fast float %2787, %197
  %2790 = fmul fast float %2787, %198
  %2791 = fadd fast float %2786, %2788
  %2792 = fadd fast float %2786, %2789
  %2793 = fadd fast float %2786, %2790
  %2794 = fmul fast float %2769, %2779
  %2795 = fmul fast float %2794, %837
  %2796 = fmul fast float %2795, %2791
  %2797 = fmul fast float %2795, %2792
  %2798 = fmul fast float %2795, %2793
  %2799 = fmul fast float %2731, %2736
  %2800 = fsub fast float %2731, %2799
  %2801 = fmul fast float %2800, %2731
  %2802 = fadd fast float %2801, %2736
  %2803 = fmul fast float %2736, 0x402921FB60000000
  %2804 = fadd fast float %2803, 0x400921FB60000000
  %2805 = fdiv fast float 1.000000e+00, %2804
  %2806 = fmul fast float %2736, %2736
  %2807 = fmul fast float %2806, 4.000000e+00
  %2808 = fmul fast float %2802, %2802
  %2809 = fdiv fast float %2807, %2808
  %2810 = fadd fast float %2809, 1.000000e+00
  %2811 = fmul fast float %2810, %2805
  %2812 = fadd fast float %2734, %837
  %2813 = fmul fast float %2734, %837
  %2814 = fsub fast float %2812, %2813
  %2815 = fdiv fast float 2.500000e-01, %2814
  %2816 = fmul fast float %2625, 5.000000e+01
  %2817 = call float @dx.op.unary.f32(i32 7, float %2816)  ; Saturate(value)
  %2818 = fmul fast float %2817, %2783
  %2819 = fmul fast float %2624, %2787
  %2820 = fmul fast float %2787, %2625
  %2821 = fmul fast float %2626, %2787
  %2822 = fadd fast float %2818, %2819
  %2823 = fadd fast float %2818, %2820
  %2824 = fadd fast float %2818, %2821
  %2825 = fmul fast float %2811, %2815
  %2826 = fmul fast float %2825, %837
  %2827 = fmul fast float %2826, %2822
  %2828 = fmul fast float %2826, %2823
  %2829 = fmul fast float %2826, %2824
  %2830 = fmul fast float %185, 0x3FD45F3060000000
  %2831 = fmul fast float %186, 0x3FD45F3060000000
  %2832 = fmul fast float %187, 0x3FD45F3060000000
  %2833 = fmul fast float %2830, %837
  %2834 = fmul fast float %2831, %837
  %2835 = fmul fast float %2832, %837
  %2836 = fsub fast float %2827, %2796
  %2837 = fsub fast float %2828, %2797
  %2838 = fsub fast float %2829, %2798
  %2839 = fmul fast float %2836, %2627
  %2840 = fmul fast float %2837, %2627
  %2841 = fmul fast float %2838, %2627
  %2842 = fadd fast float %2839, %2796
  %2843 = fadd fast float %2840, %2797
  %2844 = fadd fast float %2841, %2798
  br label %3023

; <label>:2845                                    ; preds = %835
  %2846 = fmul fast float %108, 2.000000e+00
  %2847 = fmul fast float %109, 2.000000e+00
  %2848 = fadd fast float %2846, -1.000000e+00
  %2849 = fadd fast float %2847, -1.000000e+00
  %2850 = call float @dx.op.unary.f32(i32 6, float %2848)  ; FAbs(value)
  %2851 = call float @dx.op.unary.f32(i32 6, float %2849)  ; FAbs(value)
  %2852 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %2850, float %2851)  ; Dot2(ax,ay,bx,by)
  %2853 = fsub fast float 1.000000e+00, %2852
  %2854 = fsub fast float -0.000000e+00, %2853
  %2855 = call float @dx.op.binary.f32(i32 35, float %2854, float 0.000000e+00)  ; FMax(a,b)
  %2856 = fsub fast float -0.000000e+00, %2855
  %2857 = fcmp fast oge float %2848, 0.000000e+00
  %2858 = fcmp fast oge float %2849, 0.000000e+00
  %2859 = select i1 %2857, float %2856, float %2855
  %2860 = select i1 %2858, float %2856, float %2855
  %2861 = fadd fast float %2859, %2848
  %2862 = fadd fast float %2860, %2849
  %2863 = call float @dx.op.dot3.f32(i32 55, float %2861, float %2862, float %2853, float %2861, float %2862, float %2853)  ; Dot3(ax,ay,az,bx,by,bz)
  %2864 = call float @dx.op.unary.f32(i32 25, float %2863)  ; Rsqrt(value)
  %2865 = fmul fast float %2861, %2864
  %2866 = fmul fast float %2862, %2864
  %2867 = fmul fast float %2864, %2853
  %2868 = fsub fast float 1.000000e+00, %110
  %2869 = fmul fast float %2868, %54
  %2870 = fsub fast float -0.000000e+00, %124
  %2871 = fsub fast float -0.000000e+00, %125
  %2872 = fsub fast float -0.000000e+00, %126
  %2873 = fsub fast float %2870, %2865
  %2874 = fsub fast float %2871, %2866
  %2875 = fsub fast float %2872, %2867
  %2876 = fmul fast float %2873, %2869
  %2877 = fmul fast float %2874, %2869
  %2878 = fmul fast float %2875, %2869
  %2879 = fadd fast float %2876, %2865
  %2880 = fadd fast float %2877, %2866
  %2881 = fadd fast float %2878, %2867
  %2882 = call float @dx.op.dot3.f32(i32 55, float %2879, float %2880, float %2881, float %2879, float %2880, float %2881)  ; Dot3(ax,ay,az,bx,by,bz)
  %2883 = call float @dx.op.unary.f32(i32 25, float %2882)  ; Rsqrt(value)
  %2884 = fmul fast float %2879, %2883
  %2885 = fmul fast float %2880, %2883
  %2886 = fmul fast float %2881, %2883
  %2887 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %463, float %464, float %465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2888 = call float @dx.op.dot3.f32(i32 55, float %463, float %464, float %465, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2889 = fmul fast float %2888, 2.000000e+00
  %2890 = fadd fast float %2889, 2.000000e+00
  %2891 = call float @dx.op.unary.f32(i32 25, float %2890)  ; Rsqrt(value)
  %2892 = fadd fast float %2887, %818
  %2893 = fmul fast float %2891, %2892
  %2894 = call float @dx.op.unary.f32(i32 7, float %2893)  ; Saturate(value)
  %2895 = fmul fast float %2891, %2888
  %2896 = fadd fast float %2895, %2891
  %2897 = call float @dx.op.unary.f32(i32 7, float %2896)  ; Saturate(value)
  %2898 = fcmp fast ogt float %843, 0.000000e+00
  br i1 %2898, label %2899, label %2936

; <label>:2899                                    ; preds = %2845
  %2900 = fmul fast float %843, %843
  %2901 = fsub fast float 1.000000e+00, %2900
  %2902 = call float @dx.op.unary.f32(i32 24, float %2901)  ; Sqrt(value)
  %2903 = fmul fast float %818, 2.000000e+00
  %2904 = fmul fast float %2903, %2887
  %2905 = fsub fast float %2904, %2888
  %2906 = fcmp fast ult float %2905, %2902
  br i1 %2906, label %2909, label %2907

; <label>:2907                                    ; preds = %2899
  %2908 = call float @dx.op.unary.f32(i32 6, float %2887)  ; FAbs(value)
  br label %2936

; <label>:2909                                    ; preds = %2899
  %2910 = fmul fast float %2905, %2905
  %2911 = fsub fast float 1.000000e+00, %2910
  %2912 = call float @dx.op.unary.f32(i32 25, float %2911)  ; Rsqrt(value)
  %2913 = fmul fast float %2912, %843
  %2914 = fmul fast float %2905, %818
  %2915 = fsub fast float %2887, %2914
  %2916 = fmul fast float %2913, %2915
  %2917 = fmul fast float %2887, %2887
  %2918 = fmul fast float %2917, 2.000000e+00
  %2919 = fadd fast float %2918, -1.000000e+00
  %2920 = fmul fast float %2905, %2888
  %2921 = fsub fast float %2919, %2920
  %2922 = fmul fast float %2913, %2921
  %2923 = fmul fast float %2902, %818
  %2924 = fmul fast float %2902, %2888
  %2925 = fadd fast float %2922, %2924
  %2926 = fmul fast float %2925, 2.000000e+00
  %2927 = fadd fast float %2926, 2.000000e+00
  %2928 = call float @dx.op.unary.f32(i32 25, float %2927)  ; Rsqrt(value)
  %2929 = fadd fast float %2923, %2887
  %2930 = fadd fast float %2929, %2916
  %2931 = fmul fast float %2930, %2928
  %2932 = call float @dx.op.unary.f32(i32 7, float %2931)  ; Saturate(value)
  %2933 = fmul fast float %2925, %2928
  %2934 = fadd fast float %2933, %2928
  %2935 = call float @dx.op.unary.f32(i32 7, float %2934)  ; Saturate(value)
  br label %2936

; <label>:2936                                    ; preds = %2909, %2907, %2845
  %2937 = phi float [ %2908, %2907 ], [ %2935, %2909 ], [ %2897, %2845 ]
  %2938 = phi float [ 1.000000e+00, %2907 ], [ %2932, %2909 ], [ %2894, %2845 ]
  %2939 = call float @dx.op.unary.f32(i32 6, float %2887)  ; FAbs(value)
  %2940 = fadd fast float %2939, 0x3EE4F8B580000000
  %2941 = call float @dx.op.unary.f32(i32 7, float %2940)  ; Saturate(value)
  %2942 = fmul fast float %170, 0x3FB47AE140000000
  %2943 = fsub fast float 1.000000e+00, %2937
  %2944 = fmul fast float %2943, %2943
  %2945 = fmul fast float %2944, %2944
  %2946 = fmul fast float %2945, %2943
  %2947 = fsub fast float 1.000000e+00, %2946
  %2948 = fmul fast float %2942, %2947
  %2949 = fadd fast float %2948, %2946
  %2950 = fmul fast float %813, %813
  %2951 = fmul fast float %2950, %2950
  %2952 = fcmp fast ogt float %845, 0.000000e+00
  br i1 %2952, label %2953, label %2960

; <label>:2953                                    ; preds = %2936
  %2954 = fmul fast float %845, %845
  %2955 = fmul fast float %2937, 0x400CCCCCC0000000
  %2956 = fadd fast float %2955, 0x3FD99999A0000000
  %2957 = fdiv fast float %2954, %2956
  %2958 = fadd fast float %2957, %2951
  %2959 = call float @dx.op.unary.f32(i32 7, float %2958)  ; Saturate(value)
  br label %2960

; <label>:2960                                    ; preds = %2953, %2936
  %2961 = phi float [ %2959, %2953 ], [ %2951, %2936 ]
  br i1 %2898, label %2962, label %2975

; <label>:2962                                    ; preds = %2960
  %2963 = fmul fast float %843, 2.500000e-01
  %2964 = bitcast float %2961 to i32
  %2965 = ashr i32 %2964, 1
  %2966 = add nsw i32 %2965, 532487669
  %2967 = bitcast i32 %2966 to float
  %2968 = fmul fast float %2967, 3.000000e+00
  %2969 = fadd fast float %2968, %843
  %2970 = fmul fast float %2963, %2969
  %2971 = fadd fast float %2937, 0x3F50624DE0000000
  %2972 = fdiv fast float %2970, %2971
  %2973 = fadd fast float %2972, %2961
  %2974 = fdiv fast float %2961, %2973
  br label %2975

; <label>:2975                                    ; preds = %2962, %2960
  %2976 = phi float [ %2974, %2962 ], [ 1.000000e+00, %2960 ]
  %2977 = call float @dx.op.unary.f32(i32 24, float %2961)  ; Sqrt(value)
  %2978 = fsub fast float 1.000000e+00, %2977
  %2979 = fmul fast float %2978, %2941
  %2980 = fadd fast float %2979, %2977
  %2981 = fmul fast float %2980, %837
  %2982 = fmul fast float %2978, %837
  %2983 = fadd fast float %2982, %2977
  %2984 = fmul fast float %2983, %2941
  %2985 = fadd fast float %2981, %2984
  %2986 = fdiv fast float 5.000000e-01, %2985
  %2987 = fmul fast float %2961, %2938
  %2988 = fsub fast float %2987, %2938
  %2989 = fmul fast float %2988, %2938
  %2990 = fadd fast float %2989, 1.000000e+00
  %2991 = fmul fast float %2990, %2990
  %2992 = fmul fast float %2991, 0x400921FB60000000
  %2993 = fdiv fast float %2961, %2992
  %2994 = fmul fast float %2993, %2976
  %2995 = fmul fast float %2949, %837
  %2996 = fmul fast float %2995, %2986
  %2997 = fmul fast float %2996, %2994
  %2998 = call float @dx.op.dot3.f32(i32 55, float %2865, float %2866, float %2867, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2999 = call float @dx.op.unary.f32(i32 7, float %2998)  ; Saturate(value)
  %3000 = fmul fast float %2999, 1.100000e+01
  %3001 = fsub fast float 1.200000e+01, %3000
  %3002 = fmul fast float %2999, 0x40019999A0000000
  %3003 = fsub fast float 0x4004CCCCE0000000, %3002
  %3004 = call float @dx.op.dot3.f32(i32 55, float %2884, float %2885, float %2886, float %815, float %816, float %817)  ; Dot3(ax,ay,az,bx,by,bz)
  %3005 = call float @dx.op.unary.f32(i32 7, float %3004)  ; Saturate(value)
  %3006 = call float @dx.op.unary.f32(i32 23, float %3005)  ; Log(value)
  %3007 = fmul fast float %3006, %3001
  %3008 = call float @dx.op.unary.f32(i32 21, float %3007)  ; Exp(value)
  %3009 = fmul fast float %3008, %3003
  %3010 = fadd fast float %3009, 0x3FE99999A0000000
  %3011 = fmul fast float %3010, %2999
  %3012 = fsub fast float 1.000000e+00, %2949
  %3013 = fsub fast float %3011, %837
  %3014 = fmul fast float %3013, %2868
  %3015 = fadd fast float %3014, %837
  %3016 = fmul fast float %3015, %3012
  %3017 = fmul fast float %185, 0x3FD45F3060000000
  %3018 = fmul fast float %186, 0x3FD45F3060000000
  %3019 = fmul fast float %187, 0x3FD45F3060000000
  %3020 = fmul fast float %3017, %3016
  %3021 = fmul fast float %3018, %3016
  %3022 = fmul fast float %3019, %3016
  br label %3023

; <label>:3023                                    ; preds = %2975, %2760, %2368, %2310, %2059, %1821, %1452, %1250, %985, %835
  %3024 = phi float [ %3020, %2975 ], [ 0.000000e+00, %2760 ], [ %2620, %2368 ], [ %2365, %2310 ], [ %2168, %2059 ], [ 0.000000e+00, %1821 ], [ %1504, %1452 ], [ %1310, %1250 ], [ 0.000000e+00, %985 ], [ 0.000000e+00, %835 ]
  %3025 = phi float [ %3021, %2975 ], [ 0.000000e+00, %2760 ], [ %2621, %2368 ], [ %2366, %2310 ], [ %2169, %2059 ], [ 0.000000e+00, %1821 ], [ %1505, %1452 ], [ %1311, %1250 ], [ 0.000000e+00, %985 ], [ 0.000000e+00, %835 ]
  %3026 = phi float [ %3022, %2975 ], [ 0.000000e+00, %2760 ], [ %2622, %2368 ], [ %2367, %2310 ], [ %2170, %2059 ], [ 0.000000e+00, %1821 ], [ %1506, %1452 ], [ %1312, %1250 ], [ 0.000000e+00, %985 ], [ 0.000000e+00, %835 ]
  %3027 = phi float [ %2997, %2975 ], [ %2842, %2760 ], [ 0.000000e+00, %2368 ], [ %2346, %2310 ], [ %2106, %2059 ], [ %1844, %1821 ], [ %1488, %1452 ], [ %1199, %1250 ], [ %1021, %985 ], [ 0.000000e+00, %835 ]
  %3028 = phi float [ %2997, %2975 ], [ %2843, %2760 ], [ 0.000000e+00, %2368 ], [ %2347, %2310 ], [ %2108, %2059 ], [ %1845, %1821 ], [ %1489, %1452 ], [ %1200, %1250 ], [ %1022, %985 ], [ 0.000000e+00, %835 ]
  %3029 = phi float [ %2997, %2975 ], [ %2844, %2760 ], [ 0.000000e+00, %2368 ], [ %2348, %2310 ], [ %2110, %2059 ], [ %1846, %1821 ], [ %1490, %1452 ], [ %1201, %1250 ], [ %1023, %985 ], [ 0.000000e+00, %835 ]
  %3030 = phi float [ 0.000000e+00, %2975 ], [ %2833, %2760 ], [ 0.000000e+00, %2368 ], [ %2282, %2310 ], [ %2001, %2059 ], [ %1756, %1821 ], [ %1424, %1452 ], [ %1135, %1250 ], [ %957, %985 ], [ 0.000000e+00, %835 ]
  %3031 = phi float [ 0.000000e+00, %2975 ], [ %2834, %2760 ], [ 0.000000e+00, %2368 ], [ %2283, %2310 ], [ %2003, %2059 ], [ %1757, %1821 ], [ %1425, %1452 ], [ %1136, %1250 ], [ %958, %985 ], [ 0.000000e+00, %835 ]
  %3032 = phi float [ 0.000000e+00, %2975 ], [ %2835, %2760 ], [ 0.000000e+00, %2368 ], [ %2284, %2310 ], [ %2005, %2059 ], [ %1758, %1821 ], [ %1426, %1452 ], [ %1137, %1250 ], [ %959, %985 ], [ 0.000000e+00, %835 ]
  %3033 = fmul fast float %807, %436
  %3034 = fmul fast float %807, %438
  %3035 = fmul fast float %807, %440
  br i1 %140, label %3036, label %3045

; <label>:3036                                    ; preds = %3023
  %3037 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3038 = extractvalue %dx.types.CBufRet.f32 %3037, 2
  %3039 = fcmp fast oeq float %3038, 0.000000e+00
  br i1 %3039, label %3040, label %3045

; <label>:3040                                    ; preds = %3036
  %3041 = fmul fast float %3030, %3033
  %3042 = fmul fast float %3031, %3034
  %3043 = fmul fast float %3032, %3035
  %3044 = call float @dx.op.dot3.f32(i32 55, float %3041, float %3042, float %3043, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %3045

; <label>:3045                                    ; preds = %3040, %3036, %3023
  %3046 = phi float [ %3044, %3040 ], [ 0.000000e+00, %3036 ], [ 0.000000e+00, %3023 ]
  %3047 = fmul fast float %3030, %3033
  %3048 = fmul fast float %3031, %3034
  %3049 = fmul fast float %3032, %3035
  %3050 = fmul fast float %3033, %231
  %3051 = fmul fast float %3050, %3027
  %3052 = fmul fast float %3034, %231
  %3053 = fmul fast float %3052, %3028
  %3054 = fmul fast float %3035, %231
  %3055 = fmul fast float %3054, %3029
  %3056 = fmul fast float %806, %436
  %3057 = fmul fast float %806, %438
  %3058 = fmul fast float %806, %440
  br i1 %140, label %3059, label %3069

; <label>:3059                                    ; preds = %3045
  %3060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3061 = extractvalue %dx.types.CBufRet.f32 %3060, 2
  %3062 = fcmp fast oeq float %3061, 0.000000e+00
  br i1 %3062, label %3063, label %3069

; <label>:3063                                    ; preds = %3059
  %3064 = fmul fast float %3024, %3056
  %3065 = fmul fast float %3025, %3057
  %3066 = fmul fast float %3026, %3058
  %3067 = call float @dx.op.dot3.f32(i32 55, float %3064, float %3065, float %3066, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3068 = fadd fast float %3067, %3046
  br label %3069

; <label>:3069                                    ; preds = %3063, %3059, %3045
  %3070 = phi float [ %3068, %3063 ], [ %3046, %3059 ], [ %3046, %3045 ]
  %3071 = fmul fast float %3024, %3056
  %3072 = fmul fast float %3025, %3057
  %3073 = fmul fast float %3026, %3058
  %3074 = fadd fast float %3047, %3071
  %3075 = fadd fast float %3048, %3072
  %3076 = fadd fast float %3049, %3073
  br label %3077

; <label>:3077                                    ; preds = %3069, %805
  %3078 = phi float [ %3051, %3069 ], [ 0.000000e+00, %805 ]
  %3079 = phi float [ %3053, %3069 ], [ 0.000000e+00, %805 ]
  %3080 = phi float [ %3055, %3069 ], [ 0.000000e+00, %805 ]
  %3081 = phi float [ %3074, %3069 ], [ 0.000000e+00, %805 ]
  %3082 = phi float [ %3075, %3069 ], [ 0.000000e+00, %805 ]
  %3083 = phi float [ %3076, %3069 ], [ 0.000000e+00, %805 ]
  %3084 = phi float [ %3070, %3069 ], [ 0.000000e+00, %805 ]
  %3085 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3086 = extractvalue %dx.types.CBufRet.f32 %3085, 2
  %3087 = fcmp fast oeq float %3086, 0.000000e+00
  %3088 = select i1 %3087, float %3084, float 0.000000e+00
  %3089 = fadd fast float %3081, %3078
  %3090 = fadd fast float %3082, %3079
  %3091 = fadd fast float %3083, %3080
  br label %3092

; <label>:3092                                    ; preds = %3077, %163
  %3093 = phi float [ %3089, %3077 ], [ 0.000000e+00, %163 ]
  %3094 = phi float [ %3090, %3077 ], [ 0.000000e+00, %163 ]
  %3095 = phi float [ %3091, %3077 ], [ 0.000000e+00, %163 ]
  %3096 = phi float [ %3088, %3077 ], [ 0.000000e+00, %163 ]
  %3097 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %3098 = extractvalue %dx.types.CBufRet.f32 %3097, 1
  %3099 = fmul fast float %3098, %3093
  %3100 = fmul fast float %3098, %3094
  %3101 = fmul fast float %3098, %3095
  %3102 = fmul fast float %3098, %3096
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3099)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3100)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3101)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %3102)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!30}
!dx.entryPoints = !{!31}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !19, !23}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!18 = !{i32 11, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!19 = !{!20, !21, !22}
!20 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 172, null}
!21 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!22 = !{i32 2, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 2, i32 1, i32 160, null}
!23 = !{!24, !25, !26, !27, !28, !29}
!24 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!25 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!26 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!27 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!28 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!29 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!30 = !{[14 x i32] [i32 12, i32 4, i32 15, i32 15, i32 0, i32 0, i32 15, i32 15, i32 15, i32 0, i32 15, i32 15, i32 0, i32 0]}
!31 = !{void ()* @DeferredLightPixelMain, !"DeferredLightPixelMain", !32, !4, !44}
!32 = !{!33, !41, null}
!33 = !{!34, !37, !40}
!34 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !35, i8 2, i32 1, i8 2, i32 0, i8 0, !36}
!35 = !{i32 0}
!36 = !{i32 3, i32 3}
!37 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !38, i8 2, i32 1, i8 3, i32 1, i8 0, !39}
!38 = !{i32 1}
!39 = !{i32 3, i32 7}
!40 = !{i32 2, !"SV_Position", i8 9, i8 3, !35, i8 4, i32 1, i8 4, i32 2, i8 0, !36}
!41 = !{!42}
!42 = !{i32 0, !"SV_Target", i8 9, i8 16, !35, i8 0, i32 1, i8 4, i32 0, i8 0, !43}
!43 = !{i32 3, i32 15}
!44 = !{i32 5, !35}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 2}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
